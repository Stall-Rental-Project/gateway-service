basePath: /
definitions:
  account.AuthResponse:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      roles:
        items:
          type: string
        type: array
      user_id:
        type: string
      username:
        type: string
    type: object
  account.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  account.LoginResponse_Data:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/account.AuthResponse'
    type: object
  account.Role:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
      permission_ids:
        items:
          type: string
        type: array
      role_id:
        type: string
      status:
        type: integer
    type: object
  account.UpsertRoleRequest:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
      permission_ids:
        items:
          type: string
        type: array
      role_id:
        description: only set when update
        type: string
      status:
        type: integer
    type: object
  account.UpsertUserRequest:
    properties:
      email:
        description: Insert only
        type: string
      first_name:
        type: string
      last_name:
        type: string
      market_codes:
        items:
          type: string
        type: array
      middle_name:
        type: string
      role_ids:
        items:
          type: string
        type: array
      status:
        type: integer
      user_id:
        type: string
    type: object
  account.User:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      market_codes:
        items:
          type: string
        type: array
      middle_name:
        type: string
      permissions:
        items:
          type: string
        type: array
      role_codes:
        items:
          type: string
        type: array
      role_ids:
        items:
          type: string
        type: array
      roles:
        items:
          type: string
        type: array
      status:
        type: integer
      user_id:
        type: string
    type: object
  common.Error:
    properties:
      code:
        type: integer
      details:
        additionalProperties:
          type: string
        type: object
      exception:
        type: string
      message:
        type: string
    type: object
  common.NoContentResponse:
    properties:
      error:
        $ref: '#/definitions/common.Error'
      success:
        type: boolean
    type: object
  common.OnlyCodeResponse_Data:
    properties:
      code:
        type: string
    type: object
  common.OnlyIdResponse_Data:
    properties:
      id:
        type: string
    type: object
  controller.ListFloorsResponse:
    properties:
      floors:
        items:
          $ref: '#/definitions/market.Floor'
        type: array
    type: object
  controller.ListMarketsResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/market.Market'
        type: array
      page:
        type: integer
      size:
        type: integer
      total_elements:
        type: integer
      total_pages:
        type: integer
    type: object
  controller.ListPublishedMarketsResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/market.Market'
        type: array
      total_elements:
        type: integer
    type: object
  controller.ListUsers:
    properties:
      items:
        items:
          $ref: '#/definitions/account.User'
        type: array
      total_elements:
        type: integer
    type: object
  controller.PageRates:
    properties:
      items:
        items:
          $ref: '#/definitions/rental.Rate'
        type: array
      page:
        type: integer
      size:
        type: integer
      total_elements:
        type: integer
      total_pages:
        type: integer
    type: object
  controller.PageRoles:
    properties:
      items:
        items:
          $ref: '#/definitions/account.Role'
        type: array
      page:
        type: integer
      size:
        type: integer
      total_elements:
        type: integer
      total_pages:
        type: integer
    type: object
  controller.PageUsers:
    properties:
      items:
        items:
          $ref: '#/definitions/account.User'
        type: array
      page:
        type: integer
      size:
        type: integer
      total_elements:
        type: integer
      total_pages:
        type: integer
    type: object
  controller.Permission:
    properties:
      category:
        type: string
      code:
        type: string
      name:
        type: string
      permission_id:
        type: string
    type: object
  controller.Permissions:
    properties:
      permissions:
        items:
          $ref: '#/definitions/controller.Permission'
        type: array
    type: object
  controller.Rate:
    properties:
      other_rate:
        $ref: '#/definitions/rental.OtherRate'
      rate_code:
        type: string
      rate_id:
        type: string
      rental_rate:
        $ref: '#/definitions/rental.StallRentalRate'
      rights_rate:
        $ref: '#/definitions/rental.StallRightsRate'
      security_bond:
        $ref: '#/definitions/rental.StallSecurityBond'
      status:
        type: integer
      type:
        type: integer
    type: object
  market.CreateFloorRequest:
    properties:
      image:
        type: string
      market_id:
        type: string
      name:
        type: string
    type: object
  market.CreateFloorResponse_Data:
    properties:
      floorplan_id:
        type: string
      market_id:
        type: string
    type: object
  market.DeleteFloorRequest:
    properties:
      draft_only:
        type: boolean
      floorplan_id:
        type: string
    type: object
  market.Floor:
    properties:
      code:
        type: string
      floor_data:
        type: string
      floorplan_id:
        type: string
      image:
        type: string
      name:
        type: string
      previous_version:
        type: string
      stall_with_detail:
        type: integer
      stalls:
        items:
          $ref: '#/definitions/market.Stall'
        type: array
      total_stalls:
        type: integer
    type: object
  market.GetFloorResponse_Data:
    properties:
      floor:
        $ref: '#/definitions/market.Floor'
    type: object
  market.GetLocationResponse_Data:
    properties:
      location:
        $ref: '#/definitions/market.Location'
    type: object
  market.GetMarketResponse_Data:
    properties:
      market:
        $ref: '#/definitions/market.Market'
    type: object
  market.ListCityResponse_Data:
    properties:
      cities:
        items:
          type: string
        type: array
    type: object
  market.ListProvinceResponse_Data:
    properties:
      provinces:
        items:
          type: string
        type: array
    type: object
  market.ListWardResponse_Data:
    properties:
      wards:
        items:
          type: string
        type: array
    type: object
  market.Location:
    properties:
      address:
        type: string
      city:
        type: string
      district:
        type: string
      location_id:
        type: string
      province:
        type: string
      ward:
        type: string
      zipcode:
        type: string
    type: object
  market.Market:
    properties:
      available_date:
        type: integer
      clazz:
        type: integer
      code:
        type: string
      full_address:
        type: string
      google_map:
        type: string
      has_deleted:
        type: boolean
      has_draft:
        type: boolean
      has_published:
        type: boolean
      location:
        $ref: '#/definitions/market.Location'
      market_id:
        type: string
      name:
        type: string
      state:
        type: integer
      status:
        type: integer
      supervisor:
        $ref: '#/definitions/market.Supervisor'
      type:
        type: integer
    type: object
  market.MarketLocation:
    properties:
      address:
        type: string
      city:
        type: string
      province:
        type: string
      ward:
        type: string
    type: object
  market.Point:
    properties:
      x_axis:
        type: number
      y_axis:
        type: number
    type: object
  market.Stall:
    properties:
      area:
        type: number
      clazz:
        description: Default to Regular
        type: integer
      code:
        type: string
      floor_code:
        type: string
      font_size:
        type: number
      h_axis:
        type: number
      label:
        type: string
      lease_status:
        type: integer
      market_class:
        type: integer
      market_code:
        type: string
      market_type:
        type: integer
      monthly_fee:
        type: number
      name:
        type: string
      occupied_by:
        type: string
      points:
        items:
          $ref: '#/definitions/market.Point'
        type: array
      previous_version:
        type: string
      rotate:
        type: integer
      shape:
        description: Position data
        type: string
      stall_holder_name:
        description: Fetch from rental service
        type: string
      stall_id:
        type: string
      state:
        type: integer
      status:
        description: Default to Inactive
        type: integer
      type:
        description: Default to Temporary
        type: integer
      w_axis:
        type: number
      x_axis:
        type: number
      y_axis:
        type: number
    type: object
  market.Supervisor:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      middle_name:
        type: string
      mobile_phone:
        type: string
      position:
        type: string
      supervisor_id:
        type: string
      telephone:
        type: string
    type: object
  market.UpdateFloorRequest:
    properties:
      floor_data:
        type: string
      floorplan_id:
        type: string
      image:
        type: string
      name:
        type: string
    type: object
  market.UpdateFloorResponse_Data:
    properties:
      floorplan_id:
        type: string
    type: object
  market.UpdateMarketResponse_Data:
    properties:
      market_id:
        type: string
    type: object
  market.UpsertMarketRequest:
    properties:
      clazz:
        type: integer
      google_map:
        type: string
      location:
        $ref: '#/definitions/market.MarketLocation'
      market_id:
        type: string
      name:
        type: string
      status:
        type: integer
      supervisor:
        $ref: '#/definitions/market.Supervisor'
      type:
        type: integer
    type: object
  model.ErrorResponse:
    properties:
      error_code:
        type: string
      error_description:
        type: string
      errors:
        additionalProperties:
          type: string
        type: object
      exception:
        type: string
    type: object
  model.FileResponse:
    properties:
      access_id:
        type: string
      content:
        type: string
      pre_signed_url:
        type: string
    type: object
  model.PageResponse:
    properties:
      items: {}
      page:
        type: integer
      size:
        type: integer
      total_elements:
        type: integer
      total_pages:
        type: integer
    type: object
  model.RentalAttachmentRequest:
    properties:
      attachment:
        items:
          type: integer
        type: array
    type: object
  model.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  model.User:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      market_codes:
        items:
          type: string
        type: array
      markets:
        items:
          $ref: '#/definitions/model.UserMarket'
        type: array
      middle_name:
        type: string
      permissions:
        items:
          type: string
        type: array
      role_codes:
        items:
          type: string
        type: array
      role_ids:
        items:
          type: string
        type: array
      roles:
        items:
          type: string
        type: array
      status:
        type: integer
      user_id:
        type: string
    type: object
  model.UserMarket:
    properties:
      code:
        type: string
      market_id:
        type: string
      name:
        type: string
      type:
        type: integer
    type: object
  rental.ClassAmountRate:
    properties:
      amount:
        type: number
      clazz:
        type: integer
    type: object
  rental.OtherRate:
    properties:
      amount:
        type: number
      detail:
        type: integer
    type: object
  rental.Rate:
    properties:
      other_rate:
        $ref: '#/definitions/rental.OtherRate'
        description: only one of six next fields should be set
      rate_code:
        type: string
      rate_id:
        type: string
      rental_rate:
        $ref: '#/definitions/rental.StallRentalRate'
      rights_rate:
        $ref: '#/definitions/rental.StallRightsRate'
      security_bond:
        $ref: '#/definitions/rental.StallSecurityBond'
      status:
        type: integer
      type:
        type: integer
    type: object
  rental.StallRentalRate:
    properties:
      class_rental_amounts:
        items:
          $ref: '#/definitions/rental.ClassAmountRate'
        type: array
    type: object
  rental.StallRightsRate:
    properties:
      class_rights_amounts:
        items:
          $ref: '#/definitions/rental.ClassAmountRate'
        type: array
    type: object
  rental.StallSecurityBond:
    properties:
      amount:
        type: number
      rental_fee:
        type: number
    type: object
  rental.UpsertRateRequest:
    properties:
      other_rate:
        $ref: '#/definitions/rental.OtherRate'
        description: only one of six next fields should be set
      rate_code:
        description: applied for update operation only
        type: string
      rate_id:
        type: string
      rental_rate:
        $ref: '#/definitions/rental.StallRentalRate'
      rights_rate:
        $ref: '#/definitions/rental.StallRightsRate'
      security_bond:
        $ref: '#/definitions/rental.StallSecurityBond'
      status:
        type: integer
      type:
        type: integer
    type: object
info:
  contact:
    email: hoanggg2110@gmail.com.vn
    name: 'Developer: Hoang Ngo'
  description: This is a documents for Rental System REST API.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: MHMarket REST API
  version: "1.0"
paths:
  /api/v2/files/upload:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: Body
        in: body
        name: _
        required: true
        schema:
          $ref: '#/definitions/model.RentalAttachmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.FileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Upload attachment
      tags:
      - File
  /api/v2/floors:
    delete:
      consumes:
      - application/json
      parameters:
      - description: request body
        in: body
        name: _
        required: true
        schema:
          $ref: '#/definitions/market.DeleteFloorRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.NoContentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Delete floor (single)
      tags:
      - Floor
    post:
      consumes:
      - application/json
      parameters:
      - description: request body
        in: body
        name: _
        required: true
        schema:
          $ref: '#/definitions/market.CreateFloorRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/market.CreateFloorResponse_Data'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Create floor
      tags:
      - Floor
  /api/v2/floors/:id:
    get:
      consumes:
      - application/json
      parameters:
      - description: floor id
        in: path
        name: id
        required: true
        type: string
      - description: return draft version ? default to false
        in: query
        name: draft
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/market.GetFloorResponse_Data'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get floor
      tags:
      - Floor
  /api/v2/floors/{id}:
    put:
      consumes:
      - application/json
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: request body
        in: body
        name: _
        required: true
        schema:
          $ref: '#/definitions/market.UpdateFloorRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/market.UpdateFloorResponse_Data'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Update floor
      tags:
      - Floor
  /api/v2/locations/cities:
    get:
      consumes:
      - application/json
      description: List cities
      parameters:
      - description: province that cities belong to
        in: query
        name: province
        required: true
        type: string
      - description: search by name
        in: query
        name: search_term
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/market.ListCityResponse_Data'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: List cities
      tags:
      - Location
  /api/v2/locations/provinces:
    get:
      consumes:
      - application/json
      description: List provinces
      parameters:
      - description: search by name
        in: query
        name: search_term
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/market.ListProvinceResponse_Data'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: List provinces
      tags:
      - Location
  /api/v2/locations/query:
    get:
      consumes:
      - application/json
      description: Query location by province, city & ward
      parameters:
      - description: province that wards belong to
        in: query
        name: province
        required: true
        type: string
      - description: city that wards belong to
        in: query
        name: city
        required: true
        type: string
      - description: ward specified
        in: query
        name: ward
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/market.GetLocationResponse_Data'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get specified location data
      tags:
      - Location
  /api/v2/locations/wards:
    get:
      consumes:
      - application/json
      description: List wards
      parameters:
      - description: province that wards belong to
        in: query
        name: province
        required: true
        type: string
      - description: city that wards belong to
        in: query
        name: city
        required: true
        type: string
      - description: search by name
        in: query
        name: search_term
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/market.ListWardResponse_Data'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: List wards
      tags:
      - Location
  /api/v2/login:
    post:
      consumes:
      - application/json
      description: Get Access Token and Refresh Token
      parameters:
      - description: Login Information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/account.LoginRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/account.LoginResponse_Data'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Login
      tags:
      - Auth
  /api/v2/logout:
    post:
      consumes:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Logout
      tags:
      - Auth
  /api/v2/markets:
    get:
      consumes:
      - application/json
      description: Returns the primary (current) version of markets
      parameters:
      - description: search by name or location (district, ward, detail address)
        in: query
        name: search_term
        type: string
      - description: query page, start from 1
        in: query
        name: page
        type: integer
      - description: query page size, start from 1
        in: query
        name: size
        type: integer
      - description: sort field, default to name, accepts - name, location, types,
          statuses
        in: query
        name: sort
        type: string
      - description: sort direction, default to desc, accepts - asc, desc
        in: query
        name: direction
        type: string
      - description: fetch all. default to false
        in: query
        name: all
        type: boolean
      - description: Comma-separated market's type. Accepts [1,2,3]
        in: query
        name: types
        type: string
      - description: Comma-separated market's status. Accepts [1,2,3]
        in: query
        name: statuses
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.ListMarketsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: List market
      tags:
      - Market
    post:
      consumes:
      - application/json
      description: For step 1
      parameters:
      - description: request body
        in: body
        name: _
        required: true
        schema:
          $ref: '#/definitions/market.UpsertMarketRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.OnlyIdResponse_Data'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Create market
      tags:
      - Market
  /api/v2/markets/:id/floors:
    get:
      consumes:
      - application/json
      parameters:
      - description: market id
        in: path
        name: id
        required: true
        type: string
      - description: return draft version ? default to false
        in: query
        name: draft
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.ListFloorsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: List floors
      tags:
      - Floor
  /api/v2/markets/{id}:
    get:
      consumes:
      - application/json
      description: Returns the draft (if draft = true) or primary (otherwise) version
        of markets
      parameters:
      - description: should get the draft version or not, default to false
        in: query
        name: draft
        type: boolean
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/market.GetMarketResponse_Data'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get market (for both edit & review)
      tags:
      - Market
    put:
      consumes:
      - application/json
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Market Metadata
        in: body
        name: _
        required: true
        schema:
          $ref: '#/definitions/market.UpsertMarketRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/market.UpdateMarketResponse_Data'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Update Market
      tags:
      - Market
  /api/v2/markets/published:
    get:
      consumes:
      - application/json
      description: Returns the published markets
      parameters:
      - description: Comma-separated market's status. Accepts [1,2,3]
        in: query
        name: statuses
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.ListPublishedMarketsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: List published markets
      tags:
      - Market
  /api/v2/permissions:
    get:
      consumes:
      - application/json
      parameters:
      - description: Filter by roles. Accepts a comma-separated string.
        in: query
        name: roles
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.Permissions'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: List all permissions
      tags:
      - Permissions
  /api/v2/permissions/categories:
    get:
      consumes:
      - application/json
      description: Get permission categories
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: List Permission Category
      tags:
      - Permissions
  /api/v2/rates:
    get:
      consumes:
      - application/json
      parameters:
      - description: Page size. Default to 20
        in: query
        name: size
        type: integer
      - description: Page number. Default to 1
        in: query
        name: page
        type: integer
      - description: 'Sort field. Accepts: [id, type, detail]. Default to id.'
        in: query
        name: sort
        type: string
      - description: 'Sort direction. Accepts: [asc, desc]. Default to asc'
        in: query
        name: direction
        type: string
      - description: Filter by types. Accept comma-separated numeric string
        in: query
        name: types
        type: string
      - description: Filter by details. Accept comma-separated numeric string
        in: query
        name: details
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.PageRates'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: List Rates
      tags:
      - Rate
    post:
      consumes:
      - application/json
      parameters:
      - description: Rate Information
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/rental.UpsertRateRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.OnlyCodeResponse_Data'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Create Rate
      tags:
      - Rate
  /api/v2/rates/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Rate
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Delete Rate
      tags:
      - Rate
    get:
      consumes:
      - application/json
      parameters:
      - description: Rate generated ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.Rate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get Rate
      tags:
      - Rate
    put:
      consumes:
      - application/json
      parameters:
      - description: Rate generated ID
        in: path
        name: id
        required: true
        type: string
      - description: Rate Information
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/rental.UpsertRateRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.OnlyCodeResponse_Data'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Update Rate
      tags:
      - Rate
  /api/v2/roles:
    get:
      consumes:
      - application/json
      parameters:
      - description: Page size
        in: query
        name: size
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      - description: 'Sort field Accepts: [name,status]. Default to name.'
        in: query
        name: sort
        type: string
      - description: 'Sort direction Accepts: [asc, desc]. Default to asc'
        in: query
        name: direction
        type: string
      - description: Search By Name
        in: query
        name: name
        type: string
      - description: Should include public user role or not. Default to false
        in: query
        name: include_public
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.PageRoles'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: List Role
      tags:
      - Role
    post:
      consumes:
      - application/json
      description: Create new role
      parameters:
      - description: Role Information
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/account.UpsertRoleRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.NoContentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Create Role
      tags:
      - Role
  /api/v2/roles/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a role
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Delete Role
      tags:
      - Role
    get:
      consumes:
      - application/json
      description: Get a role
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/account.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get Role
      tags:
      - Role
    put:
      consumes:
      - application/json
      description: Update a role
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Role Information
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/account.UpsertRoleRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.NoContentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Update Role
      tags:
      - Role
  /api/v2/users:
    get:
      consumes:
      - application/json
      parameters:
      - description: Page size. Default to 20
        in: query
        name: size
        type: integer
      - description: Page number. Default to 1
        in: query
        name: page
        type: integer
      - description: 'Sort field. Accepts: [id, email, status, username]. Default
          to id.'
        in: query
        name: sort
        type: string
      - description: 'Sort direction. Accepts: [asc, desc]. Default to asc'
        in: query
        name: direction
        type: string
      - description: Filter by user id or email or first name or last name
        in: query
        name: search_term
        type: string
      - description: Include public users in response. Default to false
        in: query
        name: include_public
        type: string
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Filter by roles. Accepts a comma-separated UUIDs.
        in: query
        name: roles
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.PageUsers'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: List Users
      tags:
      - User
    post:
      consumes:
      - application/json
      parameters:
      - description: User Information
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/account.UpsertUserRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.NoContentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Create User
      tags:
      - User
  /api/v2/users/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: User generated ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.NoContentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Delete User
      tags:
      - User
    get:
      consumes:
      - application/json
      parameters:
      - description: User external ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get User
      tags:
      - User
    put:
      consumes:
      - application/json
      parameters:
      - description: User external ID
        in: path
        name: id
        required: true
        type: string
      - description: User Information
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/account.UpsertUserRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.NoContentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Update User
      tags:
      - User
  /api/v2/users/current:
    get:
      consumes:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get current User profile
      tags:
      - User
  /api/v2/users/public:
    get:
      consumes:
      - application/json
      parameters:
      - description: User email
        in: query
        name: email
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.ListUsers'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: List Public Users by email
      tags:
      - User
schemes:
- https
securityDefinitions:
  Bearer Token:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
