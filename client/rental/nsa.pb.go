// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        v3.21.8
// source: rental/nsa.proto

package rental

import (
	common "gateway-service/client/common"
	market "gateway-service/client/market"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Step 1: Submit Application
type SubmitApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner                        *ApplicationOwner  `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner"`
	MarketCode                   string             `protobuf:"bytes,2,opt,name=market_code,json=marketCode,proto3" json:"market_code"`
	MarketType                   market.MarketType  `protobuf:"varint,3,opt,name=market_type,json=marketType,proto3,enum=market.MarketType" json:"market_type"`
	MarketClass                  market.MarketClass `protobuf:"varint,4,opt,name=market_class,json=marketClass,proto3,enum=market.MarketClass" json:"market_class"`
	FloorCode                    string             `protobuf:"bytes,5,opt,name=floor_code,json=floorCode,proto3" json:"floor_code"`
	StallCode                    string             `protobuf:"bytes,6,opt,name=stall_code,json=stallCode,proto3" json:"stall_code"`
	StallType                    market.StallType   `protobuf:"varint,7,opt,name=stall_type,json=stallType,proto3,enum=market.StallType" json:"stall_type"`
	StallClass                   market.StallClass  `protobuf:"varint,8,opt,name=stall_class,json=stallClass,proto3,enum=market.StallClass" json:"stall_class"`
	StallArea                    float64            `protobuf:"fixed64,9,opt,name=stall_area,json=stallArea,proto3" json:"stall_area"`
	Members                      []*Member          `protobuf:"bytes,10,rep,name=members,proto3" json:"members"`
	OwnedAnyStall                bool               `protobuf:"varint,11,opt,name=owned_any_stall,json=ownedAnyStall,proto3" json:"owned_any_stall"`
	OwnedStallInfo               string             `protobuf:"bytes,12,opt,name=owned_stall_info,json=ownedStallInfo,proto3" json:"owned_stall_info"`
	PayTaxPrevious               bool               `protobuf:"varint,13,opt,name=pay_tax_previous,json=payTaxPrevious,proto3" json:"pay_tax_previous"`
	PayTaxPreviousReason         string             `protobuf:"bytes,14,opt,name=pay_tax_previous_reason,json=payTaxPreviousReason,proto3" json:"pay_tax_previous_reason"`
	ForcedTerminatePrevious      bool               `protobuf:"varint,15,opt,name=forced_terminate_previous,json=forcedTerminatePrevious,proto3" json:"forced_terminate_previous"`
	ForcedTerminateReason        string             `protobuf:"bytes,16,opt,name=forced_terminate_reason,json=forcedTerminateReason,proto3" json:"forced_terminate_reason"`
	ExchangeRentStall            bool               `protobuf:"varint,17,opt,name=exchange_rent_stall,json=exchangeRentStall,proto3" json:"exchange_rent_stall"`
	ExchangeRentStallName        string             `protobuf:"bytes,18,opt,name=exchange_rent_stall_name,json=exchangeRentStallName,proto3" json:"exchange_rent_stall_name"`
	ConvictedViolateLaw          bool               `protobuf:"varint,19,opt,name=convicted_violate_law,json=convictedViolateLaw,proto3" json:"convicted_violate_law"`
	ConvictedViolateLawReason    string             `protobuf:"bytes,20,opt,name=convicted_violate_law_reason,json=convictedViolateLawReason,proto3" json:"convicted_violate_law_reason"`
	AdministrativeCriminal       bool               `protobuf:"varint,21,opt,name=administrative_criminal,json=administrativeCriminal,proto3" json:"administrative_criminal"`
	AdministrativeCriminalReason string             `protobuf:"bytes,22,opt,name=administrative_criminal_reason,json=administrativeCriminalReason,proto3" json:"administrative_criminal_reason"`
	SourceOfCapital              string             `protobuf:"bytes,23,opt,name=source_of_capital,json=sourceOfCapital,proto3" json:"source_of_capital"`
	Capital                      string             `protobuf:"bytes,24,opt,name=capital,proto3" json:"capital"`
	Draft                        bool               `protobuf:"varint,25,opt,name=draft,proto3" json:"draft"`
	ApplicationId                string             `protobuf:"bytes,26,opt,name=application_id,json=applicationId,proto3" json:"application_id"`
}

func (x *SubmitApplicationRequest) Reset() {
	*x = SubmitApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rental_nsa_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitApplicationRequest) ProtoMessage() {}

func (x *SubmitApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rental_nsa_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitApplicationRequest.ProtoReflect.Descriptor instead.
func (*SubmitApplicationRequest) Descriptor() ([]byte, []int) {
	return file_rental_nsa_proto_rawDescGZIP(), []int{0}
}

func (x *SubmitApplicationRequest) GetOwner() *ApplicationOwner {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *SubmitApplicationRequest) GetMarketCode() string {
	if x != nil {
		return x.MarketCode
	}
	return ""
}

func (x *SubmitApplicationRequest) GetMarketType() market.MarketType {
	if x != nil {
		return x.MarketType
	}
	return market.MarketType(0)
}

func (x *SubmitApplicationRequest) GetMarketClass() market.MarketClass {
	if x != nil {
		return x.MarketClass
	}
	return market.MarketClass(0)
}

func (x *SubmitApplicationRequest) GetFloorCode() string {
	if x != nil {
		return x.FloorCode
	}
	return ""
}

func (x *SubmitApplicationRequest) GetStallCode() string {
	if x != nil {
		return x.StallCode
	}
	return ""
}

func (x *SubmitApplicationRequest) GetStallType() market.StallType {
	if x != nil {
		return x.StallType
	}
	return market.StallType(0)
}

func (x *SubmitApplicationRequest) GetStallClass() market.StallClass {
	if x != nil {
		return x.StallClass
	}
	return market.StallClass(0)
}

func (x *SubmitApplicationRequest) GetStallArea() float64 {
	if x != nil {
		return x.StallArea
	}
	return 0
}

func (x *SubmitApplicationRequest) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *SubmitApplicationRequest) GetOwnedAnyStall() bool {
	if x != nil {
		return x.OwnedAnyStall
	}
	return false
}

func (x *SubmitApplicationRequest) GetOwnedStallInfo() string {
	if x != nil {
		return x.OwnedStallInfo
	}
	return ""
}

func (x *SubmitApplicationRequest) GetPayTaxPrevious() bool {
	if x != nil {
		return x.PayTaxPrevious
	}
	return false
}

func (x *SubmitApplicationRequest) GetPayTaxPreviousReason() string {
	if x != nil {
		return x.PayTaxPreviousReason
	}
	return ""
}

func (x *SubmitApplicationRequest) GetForcedTerminatePrevious() bool {
	if x != nil {
		return x.ForcedTerminatePrevious
	}
	return false
}

func (x *SubmitApplicationRequest) GetForcedTerminateReason() string {
	if x != nil {
		return x.ForcedTerminateReason
	}
	return ""
}

func (x *SubmitApplicationRequest) GetExchangeRentStall() bool {
	if x != nil {
		return x.ExchangeRentStall
	}
	return false
}

func (x *SubmitApplicationRequest) GetExchangeRentStallName() string {
	if x != nil {
		return x.ExchangeRentStallName
	}
	return ""
}

func (x *SubmitApplicationRequest) GetConvictedViolateLaw() bool {
	if x != nil {
		return x.ConvictedViolateLaw
	}
	return false
}

func (x *SubmitApplicationRequest) GetConvictedViolateLawReason() string {
	if x != nil {
		return x.ConvictedViolateLawReason
	}
	return ""
}

func (x *SubmitApplicationRequest) GetAdministrativeCriminal() bool {
	if x != nil {
		return x.AdministrativeCriminal
	}
	return false
}

func (x *SubmitApplicationRequest) GetAdministrativeCriminalReason() string {
	if x != nil {
		return x.AdministrativeCriminalReason
	}
	return ""
}

func (x *SubmitApplicationRequest) GetSourceOfCapital() string {
	if x != nil {
		return x.SourceOfCapital
	}
	return ""
}

func (x *SubmitApplicationRequest) GetCapital() string {
	if x != nil {
		return x.Capital
	}
	return ""
}

func (x *SubmitApplicationRequest) GetDraft() bool {
	if x != nil {
		return x.Draft
	}
	return false
}

func (x *SubmitApplicationRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

// Step 2: Submit application required docs
type SubmitApplicationDocsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId      string `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id"`
	ProofOfResidencies string `protobuf:"bytes,2,opt,name=proof_of_residencies,json=proofOfResidencies,proto3" json:"proof_of_residencies"`
	BirthCertificate   string `protobuf:"bytes,3,opt,name=birth_certificate,json=birthCertificate,proto3" json:"birth_certificate"`
	Picture            string `protobuf:"bytes,4,opt,name=picture,proto3" json:"picture"`
	Identification     string `protobuf:"bytes,5,opt,name=identification,proto3" json:"identification"`
	Draft              bool   `protobuf:"varint,6,opt,name=draft,proto3" json:"draft"`
}

func (x *SubmitApplicationDocsRequest) Reset() {
	*x = SubmitApplicationDocsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rental_nsa_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitApplicationDocsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitApplicationDocsRequest) ProtoMessage() {}

func (x *SubmitApplicationDocsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rental_nsa_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitApplicationDocsRequest.ProtoReflect.Descriptor instead.
func (*SubmitApplicationDocsRequest) Descriptor() ([]byte, []int) {
	return file_rental_nsa_proto_rawDescGZIP(), []int{1}
}

func (x *SubmitApplicationDocsRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *SubmitApplicationDocsRequest) GetProofOfResidencies() string {
	if x != nil {
		return x.ProofOfResidencies
	}
	return ""
}

func (x *SubmitApplicationDocsRequest) GetBirthCertificate() string {
	if x != nil {
		return x.BirthCertificate
	}
	return ""
}

func (x *SubmitApplicationDocsRequest) GetPicture() string {
	if x != nil {
		return x.Picture
	}
	return ""
}

func (x *SubmitApplicationDocsRequest) GetIdentification() string {
	if x != nil {
		return x.Identification
	}
	return ""
}

func (x *SubmitApplicationDocsRequest) GetDraft() bool {
	if x != nil {
		return x.Draft
	}
	return false
}

// Step 3: Submit application payment
type SubmitApplicationPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId   string        `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id"`
	PaymentMethod   PaymentMethod `protobuf:"varint,2,opt,name=payment_method,json=paymentMethod,proto3,enum=rental.PaymentMethod" json:"payment_method"`
	ProofOfTransfer string        `protobuf:"bytes,3,opt,name=proof_of_transfer,json=proofOfTransfer,proto3" json:"proof_of_transfer"`
	Draft           bool          `protobuf:"varint,4,opt,name=draft,proto3" json:"draft"`
}

func (x *SubmitApplicationPaymentRequest) Reset() {
	*x = SubmitApplicationPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rental_nsa_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitApplicationPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitApplicationPaymentRequest) ProtoMessage() {}

func (x *SubmitApplicationPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rental_nsa_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitApplicationPaymentRequest.ProtoReflect.Descriptor instead.
func (*SubmitApplicationPaymentRequest) Descriptor() ([]byte, []int) {
	return file_rental_nsa_proto_rawDescGZIP(), []int{2}
}

func (x *SubmitApplicationPaymentRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *SubmitApplicationPaymentRequest) GetPaymentMethod() PaymentMethod {
	if x != nil {
		return x.PaymentMethod
	}
	return PaymentMethod_INVALID_METHOD
}

func (x *SubmitApplicationPaymentRequest) GetProofOfTransfer() string {
	if x != nil {
		return x.ProofOfTransfer
	}
	return ""
}

func (x *SubmitApplicationPaymentRequest) GetDraft() bool {
	if x != nil {
		return x.Draft
	}
	return false
}

// Check exist application
type CheckExistApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketCode string `protobuf:"bytes,1,opt,name=market_code,json=marketCode,proto3" json:"market_code"`
	FloorCode  string `protobuf:"bytes,2,opt,name=floor_code,json=floorCode,proto3" json:"floor_code"`
	StallCode  string `protobuf:"bytes,3,opt,name=stall_code,json=stallCode,proto3" json:"stall_code"`
}

func (x *CheckExistApplicationRequest) Reset() {
	*x = CheckExistApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rental_nsa_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckExistApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckExistApplicationRequest) ProtoMessage() {}

func (x *CheckExistApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rental_nsa_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckExistApplicationRequest.ProtoReflect.Descriptor instead.
func (*CheckExistApplicationRequest) Descriptor() ([]byte, []int) {
	return file_rental_nsa_proto_rawDescGZIP(), []int{3}
}

func (x *CheckExistApplicationRequest) GetMarketCode() string {
	if x != nil {
		return x.MarketCode
	}
	return ""
}

func (x *CheckExistApplicationRequest) GetFloorCode() string {
	if x != nil {
		return x.FloorCode
	}
	return ""
}

func (x *CheckExistApplicationRequest) GetStallCode() string {
	if x != nil {
		return x.StallCode
	}
	return ""
}

type CheckExistApplicationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Searchers []*CheckExistApplicationsRequest_Searcher `protobuf:"bytes,1,rep,name=searchers,proto3" json:"searchers"`
}

func (x *CheckExistApplicationsRequest) Reset() {
	*x = CheckExistApplicationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rental_nsa_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckExistApplicationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckExistApplicationsRequest) ProtoMessage() {}

func (x *CheckExistApplicationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rental_nsa_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckExistApplicationsRequest.ProtoReflect.Descriptor instead.
func (*CheckExistApplicationsRequest) Descriptor() ([]byte, []int) {
	return file_rental_nsa_proto_rawDescGZIP(), []int{4}
}

func (x *CheckExistApplicationsRequest) GetSearchers() []*CheckExistApplicationsRequest_Searcher {
	if x != nil {
		return x.Searchers
	}
	return nil
}

type CheckExistApplicationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*CheckExistApplicationsResponse_SuccessResponse
	//	*CheckExistApplicationsResponse_ErrorResponse
	Response isCheckExistApplicationsResponse_Response `protobuf_oneof:"response"`
}

func (x *CheckExistApplicationsResponse) Reset() {
	*x = CheckExistApplicationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rental_nsa_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckExistApplicationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckExistApplicationsResponse) ProtoMessage() {}

func (x *CheckExistApplicationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rental_nsa_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckExistApplicationsResponse.ProtoReflect.Descriptor instead.
func (*CheckExistApplicationsResponse) Descriptor() ([]byte, []int) {
	return file_rental_nsa_proto_rawDescGZIP(), []int{5}
}

func (m *CheckExistApplicationsResponse) GetResponse() isCheckExistApplicationsResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *CheckExistApplicationsResponse) GetSuccessResponse() *CheckExistApplicationsSuccess {
	if x, ok := x.GetResponse().(*CheckExistApplicationsResponse_SuccessResponse); ok {
		return x.SuccessResponse
	}
	return nil
}

func (x *CheckExistApplicationsResponse) GetErrorResponse() *common.ErrorResponse {
	if x, ok := x.GetResponse().(*CheckExistApplicationsResponse_ErrorResponse); ok {
		return x.ErrorResponse
	}
	return nil
}

type isCheckExistApplicationsResponse_Response interface {
	isCheckExistApplicationsResponse_Response()
}

type CheckExistApplicationsResponse_SuccessResponse struct {
	SuccessResponse *CheckExistApplicationsSuccess `protobuf:"bytes,1,opt,name=success_response,json=successResponse,proto3,oneof"`
}

type CheckExistApplicationsResponse_ErrorResponse struct {
	ErrorResponse *common.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,proto3,oneof"`
}

func (*CheckExistApplicationsResponse_SuccessResponse) isCheckExistApplicationsResponse_Response() {}

func (*CheckExistApplicationsResponse_ErrorResponse) isCheckExistApplicationsResponse_Response() {}

type CheckExistApplicationsSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*CheckExistApplicationsSuccess_Response `protobuf:"bytes,1,rep,name=data,proto3" json:"data"`
}

func (x *CheckExistApplicationsSuccess) Reset() {
	*x = CheckExistApplicationsSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rental_nsa_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckExistApplicationsSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckExistApplicationsSuccess) ProtoMessage() {}

func (x *CheckExistApplicationsSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_rental_nsa_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckExistApplicationsSuccess.ProtoReflect.Descriptor instead.
func (*CheckExistApplicationsSuccess) Descriptor() ([]byte, []int) {
	return file_rental_nsa_proto_rawDescGZIP(), []int{6}
}

func (x *CheckExistApplicationsSuccess) GetData() []*CheckExistApplicationsSuccess_Response {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetApplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success"`
	// Types that are assignable to Response:
	//	*GetApplicationResponse_Data_
	//	*GetApplicationResponse_Error
	Response isGetApplicationResponse_Response `protobuf_oneof:"response"`
}

func (x *GetApplicationResponse) Reset() {
	*x = GetApplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rental_nsa_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApplicationResponse) ProtoMessage() {}

func (x *GetApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rental_nsa_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApplicationResponse.ProtoReflect.Descriptor instead.
func (*GetApplicationResponse) Descriptor() ([]byte, []int) {
	return file_rental_nsa_proto_rawDescGZIP(), []int{7}
}

func (x *GetApplicationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (m *GetApplicationResponse) GetResponse() isGetApplicationResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GetApplicationResponse) GetData() *GetApplicationResponse_Data {
	if x, ok := x.GetResponse().(*GetApplicationResponse_Data_); ok {
		return x.Data
	}
	return nil
}

func (x *GetApplicationResponse) GetError() *common.Error {
	if x, ok := x.GetResponse().(*GetApplicationResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isGetApplicationResponse_Response interface {
	isGetApplicationResponse_Response()
}

type GetApplicationResponse_Data_ struct {
	Data *GetApplicationResponse_Data `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

type GetApplicationResponse_Error struct {
	Error *common.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*GetApplicationResponse_Data_) isGetApplicationResponse_Response() {}

func (*GetApplicationResponse_Error) isGetApplicationResponse_Response() {}

type ConfirmApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId string `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id"`
	IsApproved    bool   `protobuf:"varint,2,opt,name=is_approved,json=isApproved,proto3" json:"is_approved"`
	Comment       string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment"`
}

func (x *ConfirmApplicationRequest) Reset() {
	*x = ConfirmApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rental_nsa_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmApplicationRequest) ProtoMessage() {}

func (x *ConfirmApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rental_nsa_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmApplicationRequest.ProtoReflect.Descriptor instead.
func (*ConfirmApplicationRequest) Descriptor() ([]byte, []int) {
	return file_rental_nsa_proto_rawDescGZIP(), []int{8}
}

func (x *ConfirmApplicationRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *ConfirmApplicationRequest) GetIsApproved() bool {
	if x != nil {
		return x.IsApproved
	}
	return false
}

func (x *ConfirmApplicationRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type CheckExistApplicationsRequest_Searcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketCode string `protobuf:"bytes,1,opt,name=market_code,json=marketCode,proto3" json:"market_code"`
	FloorCode  string `protobuf:"bytes,2,opt,name=floor_code,json=floorCode,proto3" json:"floor_code"`
	StallCode  string `protobuf:"bytes,3,opt,name=stall_code,json=stallCode,proto3" json:"stall_code"`
}

func (x *CheckExistApplicationsRequest_Searcher) Reset() {
	*x = CheckExistApplicationsRequest_Searcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rental_nsa_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckExistApplicationsRequest_Searcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckExistApplicationsRequest_Searcher) ProtoMessage() {}

func (x *CheckExistApplicationsRequest_Searcher) ProtoReflect() protoreflect.Message {
	mi := &file_rental_nsa_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckExistApplicationsRequest_Searcher.ProtoReflect.Descriptor instead.
func (*CheckExistApplicationsRequest_Searcher) Descriptor() ([]byte, []int) {
	return file_rental_nsa_proto_rawDescGZIP(), []int{4, 0}
}

func (x *CheckExistApplicationsRequest_Searcher) GetMarketCode() string {
	if x != nil {
		return x.MarketCode
	}
	return ""
}

func (x *CheckExistApplicationsRequest_Searcher) GetFloorCode() string {
	if x != nil {
		return x.FloorCode
	}
	return ""
}

func (x *CheckExistApplicationsRequest_Searcher) GetStallCode() string {
	if x != nil {
		return x.StallCode
	}
	return ""
}

type CheckExistApplicationsSuccess_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketCode string `protobuf:"bytes,1,opt,name=market_code,json=marketCode,proto3" json:"market_code"`
	FloorCode  string `protobuf:"bytes,2,opt,name=floor_code,json=floorCode,proto3" json:"floor_code"`
	StallCode  string `protobuf:"bytes,3,opt,name=stall_code,json=stallCode,proto3" json:"stall_code"`
	Status     bool   `protobuf:"varint,4,opt,name=status,proto3" json:"status"`
}

func (x *CheckExistApplicationsSuccess_Response) Reset() {
	*x = CheckExistApplicationsSuccess_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rental_nsa_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckExistApplicationsSuccess_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckExistApplicationsSuccess_Response) ProtoMessage() {}

func (x *CheckExistApplicationsSuccess_Response) ProtoReflect() protoreflect.Message {
	mi := &file_rental_nsa_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckExistApplicationsSuccess_Response.ProtoReflect.Descriptor instead.
func (*CheckExistApplicationsSuccess_Response) Descriptor() ([]byte, []int) {
	return file_rental_nsa_proto_rawDescGZIP(), []int{6, 0}
}

func (x *CheckExistApplicationsSuccess_Response) GetMarketCode() string {
	if x != nil {
		return x.MarketCode
	}
	return ""
}

func (x *CheckExistApplicationsSuccess_Response) GetFloorCode() string {
	if x != nil {
		return x.FloorCode
	}
	return ""
}

func (x *CheckExistApplicationsSuccess_Response) GetStallCode() string {
	if x != nil {
		return x.StallCode
	}
	return ""
}

func (x *CheckExistApplicationsSuccess_Response) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type GetApplicationResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application *Application `protobuf:"bytes,1,opt,name=application,proto3" json:"application"`
}

func (x *GetApplicationResponse_Data) Reset() {
	*x = GetApplicationResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rental_nsa_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApplicationResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApplicationResponse_Data) ProtoMessage() {}

func (x *GetApplicationResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_rental_nsa_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApplicationResponse_Data.ProtoReflect.Descriptor instead.
func (*GetApplicationResponse_Data) Descriptor() ([]byte, []int) {
	return file_rental_nsa_proto_rawDescGZIP(), []int{7, 0}
}

func (x *GetApplicationResponse_Data) GetApplication() *Application {
	if x != nil {
		return x.Application
	}
	return nil
}

var File_rental_nsa_proto protoreflect.FileDescriptor

var file_rental_nsa_proto_rawDesc = []byte{
	0x0a, 0x10, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2f, 0x6e, 0x73, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x15, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd, 0x09,
	0x0a, 0x18, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x36, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6c,
	0x6f, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x12, 0x28, 0x0a, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f,
	0x61, 0x6e, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x41, 0x6e, 0x79, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x28,
	0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x5f,
	0x74, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x54, 0x61, 0x78, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x61, 0x79, 0x54, 0x61, 0x78, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x13, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x37, 0x0a,
	0x18, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x77, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x77, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x6f,
	0x6e, 0x76, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x65, 0x64, 0x56, 0x69, 0x6f, 0x6c, 0x61,
	0x74, 0x65, 0x4c, 0x61, 0x77, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x17, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x72,
	0x69, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x72, 0x69, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x1e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x72, 0x69, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x66, 0x43,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61,
	0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x72, 0x61, 0x66, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x64, 0x72, 0x61, 0x66, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xfc, 0x01,
	0x0a, 0x1c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x6f,
	0x66, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x52, 0x65, 0x73, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x62, 0x69, 0x72, 0x74, 0x68, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x72, 0x61, 0x66, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x72, 0x61, 0x66, 0x74, 0x22, 0xc8, 0x01, 0x0a,
	0x1f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x6f,
	0x66, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x72, 0x61, 0x66, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x64, 0x72, 0x61, 0x66, 0x74, 0x22, 0x7d, 0x0a, 0x1c, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6c,
	0x6f, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x1d, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x52, 0x09, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x72, 0x73, 0x1a, 0x69, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0xc0, 0x01, 0x0a, 0x1e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x10, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe7, 0x01, 0x0a, 0x1d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x81, 0x01, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6c,
	0x6f, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdf,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x3d, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a,
	0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x7d, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x32,
	0xe4, 0x05, 0x0a, 0x0a, 0x4e, 0x53, 0x41, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57,
	0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x73,
	0x12, 0x24, 0x2e, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4e, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x27, 0x2e, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4e, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x2e, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x69, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x54, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x31, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x72,
	0x73, 0x2e, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x01, 0x5a, 0x1d, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2f, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_rental_nsa_proto_rawDescOnce sync.Once
	file_rental_nsa_proto_rawDescData = file_rental_nsa_proto_rawDesc
)

func file_rental_nsa_proto_rawDescGZIP() []byte {
	file_rental_nsa_proto_rawDescOnce.Do(func() {
		file_rental_nsa_proto_rawDescData = protoimpl.X.CompressGZIP(file_rental_nsa_proto_rawDescData)
	})
	return file_rental_nsa_proto_rawDescData
}

var file_rental_nsa_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_rental_nsa_proto_goTypes = []interface{}{
	(*SubmitApplicationRequest)(nil),               // 0: rental.SubmitApplicationRequest
	(*SubmitApplicationDocsRequest)(nil),           // 1: rental.SubmitApplicationDocsRequest
	(*SubmitApplicationPaymentRequest)(nil),        // 2: rental.SubmitApplicationPaymentRequest
	(*CheckExistApplicationRequest)(nil),           // 3: rental.CheckExistApplicationRequest
	(*CheckExistApplicationsRequest)(nil),          // 4: rental.CheckExistApplicationsRequest
	(*CheckExistApplicationsResponse)(nil),         // 5: rental.CheckExistApplicationsResponse
	(*CheckExistApplicationsSuccess)(nil),          // 6: rental.CheckExistApplicationsSuccess
	(*GetApplicationResponse)(nil),                 // 7: rental.GetApplicationResponse
	(*ConfirmApplicationRequest)(nil),              // 8: rental.ConfirmApplicationRequest
	(*CheckExistApplicationsRequest_Searcher)(nil), // 9: rental.CheckExistApplicationsRequest.Searcher
	(*CheckExistApplicationsSuccess_Response)(nil), // 10: rental.CheckExistApplicationsSuccess.Response
	(*GetApplicationResponse_Data)(nil),            // 11: rental.GetApplicationResponse.Data
	(*ApplicationOwner)(nil),                       // 12: rental.ApplicationOwner
	(market.MarketType)(0),                         // 13: market.MarketType
	(market.MarketClass)(0),                        // 14: market.MarketClass
	(market.StallType)(0),                          // 15: market.StallType
	(market.StallClass)(0),                         // 16: market.StallClass
	(*Member)(nil),                                 // 17: rental.Member
	(PaymentMethod)(0),                             // 18: rental.PaymentMethod
	(*common.ErrorResponse)(nil),                   // 19: common.ErrorResponse
	(*common.Error)(nil),                           // 20: common.Error
	(*Application)(nil),                            // 21: rental.Application
	(*common.FindByIdRequest)(nil),                 // 22: common.FindByIdRequest
	(*common.NoContentResponse)(nil),               // 23: common.NoContentResponse
	(*common.BooleanResponse)(nil),                 // 24: common.BooleanResponse
}
var file_rental_nsa_proto_depIdxs = []int32{
	12, // 0: rental.SubmitApplicationRequest.owner:type_name -> rental.ApplicationOwner
	13, // 1: rental.SubmitApplicationRequest.market_type:type_name -> market.MarketType
	14, // 2: rental.SubmitApplicationRequest.market_class:type_name -> market.MarketClass
	15, // 3: rental.SubmitApplicationRequest.stall_type:type_name -> market.StallType
	16, // 4: rental.SubmitApplicationRequest.stall_class:type_name -> market.StallClass
	17, // 5: rental.SubmitApplicationRequest.members:type_name -> rental.Member
	18, // 6: rental.SubmitApplicationPaymentRequest.payment_method:type_name -> rental.PaymentMethod
	9,  // 7: rental.CheckExistApplicationsRequest.searchers:type_name -> rental.CheckExistApplicationsRequest.Searcher
	6,  // 8: rental.CheckExistApplicationsResponse.success_response:type_name -> rental.CheckExistApplicationsSuccess
	19, // 9: rental.CheckExistApplicationsResponse.error_response:type_name -> common.ErrorResponse
	10, // 10: rental.CheckExistApplicationsSuccess.data:type_name -> rental.CheckExistApplicationsSuccess.Response
	11, // 11: rental.GetApplicationResponse.data:type_name -> rental.GetApplicationResponse.Data
	20, // 12: rental.GetApplicationResponse.error:type_name -> common.Error
	21, // 13: rental.GetApplicationResponse.Data.application:type_name -> rental.Application
	0,  // 14: rental.NSAService.SubmitApplication:input_type -> rental.SubmitApplicationRequest
	1,  // 15: rental.NSAService.SubmitApplicationDocs:input_type -> rental.SubmitApplicationDocsRequest
	2,  // 16: rental.NSAService.SubmitApplicationPayment:input_type -> rental.SubmitApplicationPaymentRequest
	3,  // 17: rental.NSAService.CheckExistApplication:input_type -> rental.CheckExistApplicationRequest
	4,  // 18: rental.NSAService.CheckExistApplications:input_type -> rental.CheckExistApplicationsRequest
	22, // 19: rental.NSAService.GetApplication:input_type -> common.FindByIdRequest
	0,  // 20: rental.NSAService.UpdateApplication:input_type -> rental.SubmitApplicationRequest
	8,  // 21: rental.NSAService.ConfirmApplication:input_type -> rental.ConfirmApplicationRequest
	7,  // 22: rental.NSAService.SubmitApplication:output_type -> rental.GetApplicationResponse
	23, // 23: rental.NSAService.SubmitApplicationDocs:output_type -> common.NoContentResponse
	23, // 24: rental.NSAService.SubmitApplicationPayment:output_type -> common.NoContentResponse
	24, // 25: rental.NSAService.CheckExistApplication:output_type -> common.BooleanResponse
	5,  // 26: rental.NSAService.CheckExistApplications:output_type -> rental.CheckExistApplicationsResponse
	7,  // 27: rental.NSAService.GetApplication:output_type -> rental.GetApplicationResponse
	7,  // 28: rental.NSAService.UpdateApplication:output_type -> rental.GetApplicationResponse
	23, // 29: rental.NSAService.ConfirmApplication:output_type -> common.NoContentResponse
	22, // [22:30] is the sub-list for method output_type
	14, // [14:22] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_rental_nsa_proto_init() }
func file_rental_nsa_proto_init() {
	if File_rental_nsa_proto != nil {
		return
	}
	file_rental_constant_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_rental_nsa_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rental_nsa_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitApplicationDocsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rental_nsa_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitApplicationPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rental_nsa_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckExistApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rental_nsa_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckExistApplicationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rental_nsa_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckExistApplicationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rental_nsa_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckExistApplicationsSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rental_nsa_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rental_nsa_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rental_nsa_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckExistApplicationsRequest_Searcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rental_nsa_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckExistApplicationsSuccess_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rental_nsa_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApplicationResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rental_nsa_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*CheckExistApplicationsResponse_SuccessResponse)(nil),
		(*CheckExistApplicationsResponse_ErrorResponse)(nil),
	}
	file_rental_nsa_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*GetApplicationResponse_Data_)(nil),
		(*GetApplicationResponse_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rental_nsa_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rental_nsa_proto_goTypes,
		DependencyIndexes: file_rental_nsa_proto_depIdxs,
		MessageInfos:      file_rental_nsa_proto_msgTypes,
	}.Build()
	File_rental_nsa_proto = out.File
	file_rental_nsa_proto_rawDesc = nil
	file_rental_nsa_proto_goTypes = nil
	file_rental_nsa_proto_depIdxs = nil
}
