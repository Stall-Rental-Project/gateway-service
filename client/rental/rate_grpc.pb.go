// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: rental/rate.proto

package rental

import (
	context "context"
	common "gateway-service/client/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RateServiceClient is the client API for RateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RateServiceClient interface {
	ListRates(ctx context.Context, in *ListRatesRequest, opts ...grpc.CallOption) (*common.PageResponse, error)
	GetRate(ctx context.Context, in *GetRateRequest, opts ...grpc.CallOption) (*GetRateResponse, error)
	CreateRate(ctx context.Context, in *UpsertRateRequest, opts ...grpc.CallOption) (*common.OnlyCodeResponse, error)
	UpdateRate(ctx context.Context, in *UpsertRateRequest, opts ...grpc.CallOption) (*common.OnlyCodeResponse, error)
}

type rateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRateServiceClient(cc grpc.ClientConnInterface) RateServiceClient {
	return &rateServiceClient{cc}
}

func (c *rateServiceClient) ListRates(ctx context.Context, in *ListRatesRequest, opts ...grpc.CallOption) (*common.PageResponse, error) {
	out := new(common.PageResponse)
	err := c.cc.Invoke(ctx, "/rental.RateService/ListRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateServiceClient) GetRate(ctx context.Context, in *GetRateRequest, opts ...grpc.CallOption) (*GetRateResponse, error) {
	out := new(GetRateResponse)
	err := c.cc.Invoke(ctx, "/rental.RateService/GetRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateServiceClient) CreateRate(ctx context.Context, in *UpsertRateRequest, opts ...grpc.CallOption) (*common.OnlyCodeResponse, error) {
	out := new(common.OnlyCodeResponse)
	err := c.cc.Invoke(ctx, "/rental.RateService/CreateRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateServiceClient) UpdateRate(ctx context.Context, in *UpsertRateRequest, opts ...grpc.CallOption) (*common.OnlyCodeResponse, error) {
	out := new(common.OnlyCodeResponse)
	err := c.cc.Invoke(ctx, "/rental.RateService/UpdateRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RateServiceServer is the server API for RateService service.
// All implementations must embed UnimplementedRateServiceServer
// for forward compatibility
type RateServiceServer interface {
	ListRates(context.Context, *ListRatesRequest) (*common.PageResponse, error)
	GetRate(context.Context, *GetRateRequest) (*GetRateResponse, error)
	CreateRate(context.Context, *UpsertRateRequest) (*common.OnlyCodeResponse, error)
	UpdateRate(context.Context, *UpsertRateRequest) (*common.OnlyCodeResponse, error)
	mustEmbedUnimplementedRateServiceServer()
}

// UnimplementedRateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRateServiceServer struct {
}

func (UnimplementedRateServiceServer) ListRates(context.Context, *ListRatesRequest) (*common.PageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRates not implemented")
}
func (UnimplementedRateServiceServer) GetRate(context.Context, *GetRateRequest) (*GetRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRate not implemented")
}
func (UnimplementedRateServiceServer) CreateRate(context.Context, *UpsertRateRequest) (*common.OnlyCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRate not implemented")
}
func (UnimplementedRateServiceServer) UpdateRate(context.Context, *UpsertRateRequest) (*common.OnlyCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRate not implemented")
}
func (UnimplementedRateServiceServer) mustEmbedUnimplementedRateServiceServer() {}

// UnsafeRateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RateServiceServer will
// result in compilation errors.
type UnsafeRateServiceServer interface {
	mustEmbedUnimplementedRateServiceServer()
}

func RegisterRateServiceServer(s grpc.ServiceRegistrar, srv RateServiceServer) {
	s.RegisterService(&RateService_ServiceDesc, srv)
}

func _RateService_ListRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateServiceServer).ListRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rental.RateService/ListRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateServiceServer).ListRates(ctx, req.(*ListRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateService_GetRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateServiceServer).GetRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rental.RateService/GetRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateServiceServer).GetRate(ctx, req.(*GetRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateService_CreateRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateServiceServer).CreateRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rental.RateService/CreateRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateServiceServer).CreateRate(ctx, req.(*UpsertRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateService_UpdateRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateServiceServer).UpdateRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rental.RateService/UpdateRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateServiceServer).UpdateRate(ctx, req.(*UpsertRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RateService_ServiceDesc is the grpc.ServiceDesc for RateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rental.RateService",
	HandlerType: (*RateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRates",
			Handler:    _RateService_ListRates_Handler,
		},
		{
			MethodName: "GetRate",
			Handler:    _RateService_GetRate_Handler,
		},
		{
			MethodName: "CreateRate",
			Handler:    _RateService_CreateRate_Handler,
		},
		{
			MethodName: "UpdateRate",
			Handler:    _RateService_UpdateRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rental/rate.proto",
}
