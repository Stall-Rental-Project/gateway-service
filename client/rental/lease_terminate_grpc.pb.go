// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: rental/lease_terminate.proto

package rental

import (
	context "context"
	common "gateway-service/client/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LeaseTerminationServiceClient is the client API for LeaseTerminationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaseTerminationServiceClient interface {
	GetLeaseTermination(ctx context.Context, in *common.FindByIdRequest, opts ...grpc.CallOption) (*GetLeaseTerminationResponse, error)
	CreateLeaseTermination(ctx context.Context, in *CreateLeaseTerminationRequest, opts ...grpc.CallOption) (*common.NoContentResponse, error)
	ProceedLeaseTermination(ctx context.Context, in *ProceedLeaseTerminationRequest, opts ...grpc.CallOption) (*common.NoContentResponse, error)
}

type leaseTerminationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaseTerminationServiceClient(cc grpc.ClientConnInterface) LeaseTerminationServiceClient {
	return &leaseTerminationServiceClient{cc}
}

func (c *leaseTerminationServiceClient) GetLeaseTermination(ctx context.Context, in *common.FindByIdRequest, opts ...grpc.CallOption) (*GetLeaseTerminationResponse, error) {
	out := new(GetLeaseTerminationResponse)
	err := c.cc.Invoke(ctx, "/rental.LeaseTerminationService/GetLeaseTermination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaseTerminationServiceClient) CreateLeaseTermination(ctx context.Context, in *CreateLeaseTerminationRequest, opts ...grpc.CallOption) (*common.NoContentResponse, error) {
	out := new(common.NoContentResponse)
	err := c.cc.Invoke(ctx, "/rental.LeaseTerminationService/CreateLeaseTermination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaseTerminationServiceClient) ProceedLeaseTermination(ctx context.Context, in *ProceedLeaseTerminationRequest, opts ...grpc.CallOption) (*common.NoContentResponse, error) {
	out := new(common.NoContentResponse)
	err := c.cc.Invoke(ctx, "/rental.LeaseTerminationService/ProceedLeaseTermination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaseTerminationServiceServer is the server API for LeaseTerminationService service.
// All implementations must embed UnimplementedLeaseTerminationServiceServer
// for forward compatibility
type LeaseTerminationServiceServer interface {
	GetLeaseTermination(context.Context, *common.FindByIdRequest) (*GetLeaseTerminationResponse, error)
	CreateLeaseTermination(context.Context, *CreateLeaseTerminationRequest) (*common.NoContentResponse, error)
	ProceedLeaseTermination(context.Context, *ProceedLeaseTerminationRequest) (*common.NoContentResponse, error)
	mustEmbedUnimplementedLeaseTerminationServiceServer()
}

// UnimplementedLeaseTerminationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLeaseTerminationServiceServer struct {
}

func (UnimplementedLeaseTerminationServiceServer) GetLeaseTermination(context.Context, *common.FindByIdRequest) (*GetLeaseTerminationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaseTermination not implemented")
}
func (UnimplementedLeaseTerminationServiceServer) CreateLeaseTermination(context.Context, *CreateLeaseTerminationRequest) (*common.NoContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLeaseTermination not implemented")
}
func (UnimplementedLeaseTerminationServiceServer) ProceedLeaseTermination(context.Context, *ProceedLeaseTerminationRequest) (*common.NoContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProceedLeaseTermination not implemented")
}
func (UnimplementedLeaseTerminationServiceServer) mustEmbedUnimplementedLeaseTerminationServiceServer() {
}

// UnsafeLeaseTerminationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaseTerminationServiceServer will
// result in compilation errors.
type UnsafeLeaseTerminationServiceServer interface {
	mustEmbedUnimplementedLeaseTerminationServiceServer()
}

func RegisterLeaseTerminationServiceServer(s grpc.ServiceRegistrar, srv LeaseTerminationServiceServer) {
	s.RegisterService(&LeaseTerminationService_ServiceDesc, srv)
}

func _LeaseTerminationService_GetLeaseTermination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.FindByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseTerminationServiceServer).GetLeaseTermination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rental.LeaseTerminationService/GetLeaseTermination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseTerminationServiceServer).GetLeaseTermination(ctx, req.(*common.FindByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaseTerminationService_CreateLeaseTermination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLeaseTerminationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseTerminationServiceServer).CreateLeaseTermination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rental.LeaseTerminationService/CreateLeaseTermination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseTerminationServiceServer).CreateLeaseTermination(ctx, req.(*CreateLeaseTerminationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaseTerminationService_ProceedLeaseTermination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProceedLeaseTerminationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseTerminationServiceServer).ProceedLeaseTermination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rental.LeaseTerminationService/ProceedLeaseTermination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseTerminationServiceServer).ProceedLeaseTermination(ctx, req.(*ProceedLeaseTerminationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaseTerminationService_ServiceDesc is the grpc.ServiceDesc for LeaseTerminationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaseTerminationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rental.LeaseTerminationService",
	HandlerType: (*LeaseTerminationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLeaseTermination",
			Handler:    _LeaseTerminationService_GetLeaseTermination_Handler,
		},
		{
			MethodName: "CreateLeaseTermination",
			Handler:    _LeaseTerminationService_CreateLeaseTermination_Handler,
		},
		{
			MethodName: "ProceedLeaseTermination",
			Handler:    _LeaseTerminationService_ProceedLeaseTermination_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rental/lease_terminate.proto",
}
