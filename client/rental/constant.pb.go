// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        v3.21.8
// source: rental/constant.proto

package rental

import (
	market "gateway-service/client/market"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RateType int32

const (
	RateType_STALL_RENTAL_RATE   RateType = 0
	RateType_STALL_RIGHTS_RATE   RateType = 1
	RateType_STALL_SECURITY_BOND RateType = 2
	RateType_OTHER_RATES         RateType = 3
)

// Enum value maps for RateType.
var (
	RateType_name = map[int32]string{
		0: "STALL_RENTAL_RATE",
		1: "STALL_RIGHTS_RATE",
		2: "STALL_SECURITY_BOND",
		3: "OTHER_RATES",
	}
	RateType_value = map[string]int32{
		"STALL_RENTAL_RATE":   0,
		"STALL_RIGHTS_RATE":   1,
		"STALL_SECURITY_BOND": 2,
		"OTHER_RATES":         3,
	}
)

func (x RateType) Enum() *RateType {
	p := new(RateType)
	*p = x
	return p
}

func (x RateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RateType) Descriptor() protoreflect.EnumDescriptor {
	return file_rental_constant_proto_enumTypes[0].Descriptor()
}

func (RateType) Type() protoreflect.EnumType {
	return &file_rental_constant_proto_enumTypes[0]
}

func (x RateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RateType.Descriptor instead.
func (RateType) EnumDescriptor() ([]byte, []int) {
	return file_rental_constant_proto_rawDescGZIP(), []int{0}
}

type OtherRateDetail int32

const (
	OtherRateDetail_NEW_STALL_APPLICATION_FEE      OtherRateDetail = 0
	OtherRateDetail_RENEWAL_STALL_APPLICATION_FEE  OtherRateDetail = 1
	OtherRateDetail_TRANSFER_STALL_APPLICATION_FEE OtherRateDetail = 2
	OtherRateDetail_TRANSFER_FEE                   OtherRateDetail = 3
	OtherRateDetail_REPAIR_PERMIT_FEE              OtherRateDetail = 4
)

// Enum value maps for OtherRateDetail.
var (
	OtherRateDetail_name = map[int32]string{
		0: "NEW_STALL_APPLICATION_FEE",
		1: "RENEWAL_STALL_APPLICATION_FEE",
		2: "TRANSFER_STALL_APPLICATION_FEE",
		3: "TRANSFER_FEE",
		4: "REPAIR_PERMIT_FEE",
	}
	OtherRateDetail_value = map[string]int32{
		"NEW_STALL_APPLICATION_FEE":      0,
		"RENEWAL_STALL_APPLICATION_FEE":  1,
		"TRANSFER_STALL_APPLICATION_FEE": 2,
		"TRANSFER_FEE":                   3,
		"REPAIR_PERMIT_FEE":              4,
	}
)

func (x OtherRateDetail) Enum() *OtherRateDetail {
	p := new(OtherRateDetail)
	*p = x
	return p
}

func (x OtherRateDetail) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OtherRateDetail) Descriptor() protoreflect.EnumDescriptor {
	return file_rental_constant_proto_enumTypes[1].Descriptor()
}

func (OtherRateDetail) Type() protoreflect.EnumType {
	return &file_rental_constant_proto_enumTypes[1]
}

func (x OtherRateDetail) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OtherRateDetail.Descriptor instead.
func (OtherRateDetail) EnumDescriptor() ([]byte, []int) {
	return file_rental_constant_proto_rawDescGZIP(), []int{1}
}

type TerminationStatus int32

const (
	TerminationStatus_T_REQUESTED TerminationStatus = 0
	TerminationStatus_T_CANCELLED TerminationStatus = 1
	TerminationStatus_T_PENDING   TerminationStatus = 2
	TerminationStatus_T_CLOSED    TerminationStatus = 3
)

// Enum value maps for TerminationStatus.
var (
	TerminationStatus_name = map[int32]string{
		0: "T_REQUESTED",
		1: "T_CANCELLED",
		2: "T_PENDING",
		3: "T_CLOSED",
	}
	TerminationStatus_value = map[string]int32{
		"T_REQUESTED": 0,
		"T_CANCELLED": 1,
		"T_PENDING":   2,
		"T_CLOSED":    3,
	}
)

func (x TerminationStatus) Enum() *TerminationStatus {
	p := new(TerminationStatus)
	*p = x
	return p
}

func (x TerminationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TerminationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_rental_constant_proto_enumTypes[2].Descriptor()
}

func (TerminationStatus) Type() protoreflect.EnumType {
	return &file_rental_constant_proto_enumTypes[2]
}

func (x TerminationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TerminationStatus.Descriptor instead.
func (TerminationStatus) EnumDescriptor() ([]byte, []int) {
	return file_rental_constant_proto_rawDescGZIP(), []int{2}
}

type Sex int32

const (
	Sex_MALE   Sex = 0
	Sex_FEMALE Sex = 1
)

// Enum value maps for Sex.
var (
	Sex_name = map[int32]string{
		0: "MALE",
		1: "FEMALE",
	}
	Sex_value = map[string]int32{
		"MALE":   0,
		"FEMALE": 1,
	}
)

func (x Sex) Enum() *Sex {
	p := new(Sex)
	*p = x
	return p
}

func (x Sex) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sex) Descriptor() protoreflect.EnumDescriptor {
	return file_rental_constant_proto_enumTypes[3].Descriptor()
}

func (Sex) Type() protoreflect.EnumType {
	return &file_rental_constant_proto_enumTypes[3]
}

func (x Sex) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sex.Descriptor instead.
func (Sex) EnumDescriptor() ([]byte, []int) {
	return file_rental_constant_proto_rawDescGZIP(), []int{3}
}

type CivilStatus int32

const (
	CivilStatus_SINGLE    CivilStatus = 0
	CivilStatus_MARRIED   CivilStatus = 1
	CivilStatus_SEPARATED CivilStatus = 2
	CivilStatus_WIDOW     CivilStatus = 3
)

// Enum value maps for CivilStatus.
var (
	CivilStatus_name = map[int32]string{
		0: "SINGLE",
		1: "MARRIED",
		2: "SEPARATED",
		3: "WIDOW",
	}
	CivilStatus_value = map[string]int32{
		"SINGLE":    0,
		"MARRIED":   1,
		"SEPARATED": 2,
		"WIDOW":     3,
	}
)

func (x CivilStatus) Enum() *CivilStatus {
	p := new(CivilStatus)
	*p = x
	return p
}

func (x CivilStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CivilStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_rental_constant_proto_enumTypes[4].Descriptor()
}

func (CivilStatus) Type() protoreflect.EnumType {
	return &file_rental_constant_proto_enumTypes[4]
}

func (x CivilStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CivilStatus.Descriptor instead.
func (CivilStatus) EnumDescriptor() ([]byte, []int) {
	return file_rental_constant_proto_rawDescGZIP(), []int{4}
}

type PaymentStatus int32

const (
	PaymentStatus_P_PENDING_PAYMENT          PaymentStatus = 0
	PaymentStatus_P_FOR_PAYMENT_VERIFICATION PaymentStatus = 1
	PaymentStatus_P_PAYMENT_INFO_REQUESTED   PaymentStatus = 2
	PaymentStatus_P_PAID                     PaymentStatus = 3
)

// Enum value maps for PaymentStatus.
var (
	PaymentStatus_name = map[int32]string{
		0: "P_PENDING_PAYMENT",
		1: "P_FOR_PAYMENT_VERIFICATION",
		2: "P_PAYMENT_INFO_REQUESTED",
		3: "P_PAID",
	}
	PaymentStatus_value = map[string]int32{
		"P_PENDING_PAYMENT":          0,
		"P_FOR_PAYMENT_VERIFICATION": 1,
		"P_PAYMENT_INFO_REQUESTED":   2,
		"P_PAID":                     3,
	}
)

func (x PaymentStatus) Enum() *PaymentStatus {
	p := new(PaymentStatus)
	*p = x
	return p
}

func (x PaymentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_rental_constant_proto_enumTypes[5].Descriptor()
}

func (PaymentStatus) Type() protoreflect.EnumType {
	return &file_rental_constant_proto_enumTypes[5]
}

func (x PaymentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentStatus.Descriptor instead.
func (PaymentStatus) EnumDescriptor() ([]byte, []int) {
	return file_rental_constant_proto_rawDescGZIP(), []int{5}
}

type LeaseStatus int32

const (
	LeaseStatus_WAITING         LeaseStatus = 0
	LeaseStatus_ACTIVE          LeaseStatus = 1
	LeaseStatus_FOR_TERMINATION LeaseStatus = 2
	LeaseStatus_TERMINATED      LeaseStatus = 3
	LeaseStatus_INACTIVE        LeaseStatus = 4
)

// Enum value maps for LeaseStatus.
var (
	LeaseStatus_name = map[int32]string{
		0: "WAITING",
		1: "ACTIVE",
		2: "FOR_TERMINATION",
		3: "TERMINATED",
		4: "INACTIVE",
	}
	LeaseStatus_value = map[string]int32{
		"WAITING":         0,
		"ACTIVE":          1,
		"FOR_TERMINATION": 2,
		"TERMINATED":      3,
		"INACTIVE":        4,
	}
)

func (x LeaseStatus) Enum() *LeaseStatus {
	p := new(LeaseStatus)
	*p = x
	return p
}

func (x LeaseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeaseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_rental_constant_proto_enumTypes[6].Descriptor()
}

func (LeaseStatus) Type() protoreflect.EnumType {
	return &file_rental_constant_proto_enumTypes[6]
}

func (x LeaseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LeaseStatus.Descriptor instead.
func (LeaseStatus) EnumDescriptor() ([]byte, []int) {
	return file_rental_constant_proto_rawDescGZIP(), []int{6}
}

type ApplicationType int32

const (
	ApplicationType_NEW_STALL_APP     ApplicationType = 0
	ApplicationType_RENEWAL_STALL_APP ApplicationType = 1
)

// Enum value maps for ApplicationType.
var (
	ApplicationType_name = map[int32]string{
		0: "NEW_STALL_APP",
		1: "RENEWAL_STALL_APP",
	}
	ApplicationType_value = map[string]int32{
		"NEW_STALL_APP":     0,
		"RENEWAL_STALL_APP": 1,
	}
)

func (x ApplicationType) Enum() *ApplicationType {
	p := new(ApplicationType)
	*p = x
	return p
}

func (x ApplicationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApplicationType) Descriptor() protoreflect.EnumDescriptor {
	return file_rental_constant_proto_enumTypes[7].Descriptor()
}

func (ApplicationType) Type() protoreflect.EnumType {
	return &file_rental_constant_proto_enumTypes[7]
}

func (x ApplicationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApplicationType.Descriptor instead.
func (ApplicationType) EnumDescriptor() ([]byte, []int) {
	return file_rental_constant_proto_rawDescGZIP(), []int{7}
}

type WorkflowStatus int32

const (
	WorkflowStatus_NEW                      WorkflowStatus = 0
	WorkflowStatus_IN_PROGRESS              WorkflowStatus = 1
	WorkflowStatus_PAYMENT_INFO_REQUESTED   WorkflowStatus = 2
	WorkflowStatus_FOR_PAYMENT_VERIFICATION WorkflowStatus = 3
	WorkflowStatus_APPROVED                 WorkflowStatus = 4
	WorkflowStatus_DISAPPROVED              WorkflowStatus = 5
	WorkflowStatus_CANCELLED                WorkflowStatus = 6
)

// Enum value maps for WorkflowStatus.
var (
	WorkflowStatus_name = map[int32]string{
		0: "NEW",
		1: "IN_PROGRESS",
		2: "PAYMENT_INFO_REQUESTED",
		3: "FOR_PAYMENT_VERIFICATION",
		4: "APPROVED",
		5: "DISAPPROVED",
		6: "CANCELLED",
	}
	WorkflowStatus_value = map[string]int32{
		"NEW":                      0,
		"IN_PROGRESS":              1,
		"PAYMENT_INFO_REQUESTED":   2,
		"FOR_PAYMENT_VERIFICATION": 3,
		"APPROVED":                 4,
		"DISAPPROVED":              5,
		"CANCELLED":                6,
	}
)

func (x WorkflowStatus) Enum() *WorkflowStatus {
	p := new(WorkflowStatus)
	*p = x
	return p
}

func (x WorkflowStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_rental_constant_proto_enumTypes[8].Descriptor()
}

func (WorkflowStatus) Type() protoreflect.EnumType {
	return &file_rental_constant_proto_enumTypes[8]
}

func (x WorkflowStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowStatus.Descriptor instead.
func (WorkflowStatus) EnumDescriptor() ([]byte, []int) {
	return file_rental_constant_proto_rawDescGZIP(), []int{8}
}

type PaymentMethod int32

const (
	PaymentMethod_INVALID_METHOD PaymentMethod = 0
	PaymentMethod_MANUAL         PaymentMethod = 1
	PaymentMethod_ONLINE         PaymentMethod = 2
)

// Enum value maps for PaymentMethod.
var (
	PaymentMethod_name = map[int32]string{
		0: "INVALID_METHOD",
		1: "MANUAL",
		2: "ONLINE",
	}
	PaymentMethod_value = map[string]int32{
		"INVALID_METHOD": 0,
		"MANUAL":         1,
		"ONLINE":         2,
	}
)

func (x PaymentMethod) Enum() *PaymentMethod {
	p := new(PaymentMethod)
	*p = x
	return p
}

func (x PaymentMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_rental_constant_proto_enumTypes[9].Descriptor()
}

func (PaymentMethod) Type() protoreflect.EnumType {
	return &file_rental_constant_proto_enumTypes[9]
}

func (x PaymentMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentMethod.Descriptor instead.
func (PaymentMethod) EnumDescriptor() ([]byte, []int) {
	return file_rental_constant_proto_rawDescGZIP(), []int{9}
}

type ScheduledTask int32

const (
	ScheduledTask_TASK_LEASE_TERMINATE ScheduledTask = 0
	ScheduledTask_TASK_LEASE_EXPIRED   ScheduledTask = 1
)

// Enum value maps for ScheduledTask.
var (
	ScheduledTask_name = map[int32]string{
		0: "TASK_LEASE_TERMINATE",
		1: "TASK_LEASE_EXPIRED",
	}
	ScheduledTask_value = map[string]int32{
		"TASK_LEASE_TERMINATE": 0,
		"TASK_LEASE_EXPIRED":   1,
	}
)

func (x ScheduledTask) Enum() *ScheduledTask {
	p := new(ScheduledTask)
	*p = x
	return p
}

func (x ScheduledTask) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScheduledTask) Descriptor() protoreflect.EnumDescriptor {
	return file_rental_constant_proto_enumTypes[10].Descriptor()
}

func (ScheduledTask) Type() protoreflect.EnumType {
	return &file_rental_constant_proto_enumTypes[10]
}

func (x ScheduledTask) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScheduledTask.Descriptor instead.
func (ScheduledTask) EnumDescriptor() ([]byte, []int) {
	return file_rental_constant_proto_rawDescGZIP(), []int{10}
}

type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	Age      int32  `protobuf:"varint,2,opt,name=age,proto3" json:"age"`
	MemberId string `protobuf:"bytes,3,opt,name=member_id,json=memberId,proto3" json:"member_id"`
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rental_constant_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_rental_constant_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_rental_constant_proto_rawDescGZIP(), []int{0}
}

func (x *Member) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Member) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *Member) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

type Application struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId string             `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id"`
	Code          string             `protobuf:"bytes,2,opt,name=code,proto3" json:"code"` // application generated code
	Owner         *ApplicationOwner  `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner"`
	MarketCode    string             `protobuf:"bytes,4,opt,name=market_code,json=marketCode,proto3" json:"market_code"`
	MarketName    string             `protobuf:"bytes,5,opt,name=market_name,json=marketName,proto3" json:"market_name"` // fetched from Market service
	MarketType    market.MarketType  `protobuf:"varint,6,opt,name=market_type,json=marketType,proto3,enum=market.MarketType" json:"market_type"`
	MarketClass   market.MarketClass `protobuf:"varint,7,opt,name=market_class,json=marketClass,proto3,enum=market.MarketClass" json:"market_class"`
	FloorCode     string             `protobuf:"bytes,8,opt,name=floor_code,json=floorCode,proto3" json:"floor_code"`
	FloorName     string             `protobuf:"bytes,9,opt,name=floor_name,json=floorName,proto3" json:"floor_name"` // fetched from Market service
	StallCode     string             `protobuf:"bytes,10,opt,name=stall_code,json=stallCode,proto3" json:"stall_code"`
	StallType     market.StallType   `protobuf:"varint,11,opt,name=stall_type,json=stallType,proto3,enum=market.StallType" json:"stall_type"`
	StallName     string             `protobuf:"bytes,12,opt,name=stall_name,json=stallName,proto3" json:"stall_name"` // fetched from Market service
	StallArea     float64            `protobuf:"fixed64,13,opt,name=stall_area,json=stallArea,proto3" json:"stall_area"`
	StallClass    market.StallClass  `protobuf:"varint,14,opt,name=stall_class,json=stallClass,proto3,enum=market.StallClass" json:"stall_class"`
	Type          ApplicationType    `protobuf:"varint,18,opt,name=type,proto3,enum=rental.ApplicationType" json:"type"`
	Status        WorkflowStatus     `protobuf:"varint,19,opt,name=status,proto3,enum=rental.WorkflowStatus" json:"status"` // references to WorkflowStatus enum
	Members       []*Member          `protobuf:"bytes,20,rep,name=members,proto3" json:"members"`
	CreatedAt     string             `protobuf:"bytes,22,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	CreatedBy     string             `protobuf:"bytes,96,opt,name=created_by,json=createdBy,proto3" json:"created_by"`
	// Other occupation or source of income
	OtherOccupation              string        `protobuf:"bytes,23,opt,name=other_occupation,json=otherOccupation,proto3" json:"other_occupation"`
	OwnedAnyStall                bool          `protobuf:"varint,24,opt,name=owned_any_stall,json=ownedAnyStall,proto3" json:"owned_any_stall"`
	OwnedStallInfo               string        `protobuf:"bytes,25,opt,name=owned_stall_info,json=ownedStallInfo,proto3" json:"owned_stall_info"`
	PayTaxPrevious               bool          `protobuf:"varint,26,opt,name=pay_tax_previous,json=payTaxPrevious,proto3" json:"pay_tax_previous"`
	PayTaxPreviousReason         string        `protobuf:"bytes,27,opt,name=pay_tax_previous_reason,json=payTaxPreviousReason,proto3" json:"pay_tax_previous_reason"`
	ForcedTerminatePrevious      bool          `protobuf:"varint,28,opt,name=forced_terminate_previous,json=forcedTerminatePrevious,proto3" json:"forced_terminate_previous"`
	ForcedTerminateReason        string        `protobuf:"bytes,29,opt,name=forced_terminate_reason,json=forcedTerminateReason,proto3" json:"forced_terminate_reason"`
	ExchangeRentStall            bool          `protobuf:"varint,30,opt,name=exchange_rent_stall,json=exchangeRentStall,proto3" json:"exchange_rent_stall"`
	ExchangeRentStallName        string        `protobuf:"bytes,31,opt,name=exchange_rent_stall_name,json=exchangeRentStallName,proto3" json:"exchange_rent_stall_name"`
	ConvictedViolateLaw          bool          `protobuf:"varint,32,opt,name=convicted_violate_law,json=convictedViolateLaw,proto3" json:"convicted_violate_law"`
	ConvictedViolateLawReason    string        `protobuf:"bytes,33,opt,name=convicted_violate_law_reason,json=convictedViolateLawReason,proto3" json:"convicted_violate_law_reason"`
	AdministrativeCriminal       bool          `protobuf:"varint,34,opt,name=administrative_criminal,json=administrativeCriminal,proto3" json:"administrative_criminal"`
	AdministrativeCriminalReason string        `protobuf:"bytes,35,opt,name=administrative_criminal_reason,json=administrativeCriminalReason,proto3" json:"administrative_criminal_reason"`
	Capital                      string        `protobuf:"bytes,36,opt,name=capital,proto3" json:"capital"`
	SourceOfCapital              string        `protobuf:"bytes,95,opt,name=source_of_capital,json=sourceOfCapital,proto3" json:"source_of_capital"`
	ItemType                     string        `protobuf:"bytes,37,opt,name=item_type,json=itemType,proto3" json:"item_type"`                                 // what stallholder is going to sell
	ProofOfResidencies           string        `protobuf:"bytes,38,opt,name=proof_of_residencies,json=proofOfResidencies,proto3" json:"proof_of_residencies"` // URL
	BirthCertificate             string        `protobuf:"bytes,39,opt,name=birth_certificate,json=birthCertificate,proto3" json:"birth_certificate"`         // URL
	Picture                      string        `protobuf:"bytes,40,opt,name=picture,proto3" json:"picture"`                                                   // URL
	PaymentMethod                PaymentMethod `protobuf:"varint,41,opt,name=payment_method,json=paymentMethod,proto3,enum=rental.PaymentMethod" json:"payment_method"`
	ProofOfTransfer              string        `protobuf:"bytes,42,opt,name=proof_of_transfer,json=proofOfTransfer,proto3" json:"proof_of_transfer"`
	Identification               string        `protobuf:"bytes,43,opt,name=identification,proto3" json:"identification"` // Unknown/Misleading field ~~
	InitialFee                   float64       `protobuf:"fixed64,47,opt,name=initial_fee,json=initialFee,proto3" json:"initial_fee"`
	//  double monthly_fee = 48; // Calculated dynamically from rate management module
	//  double security_fee = 49;
	TotalAmountDue float64 `protobuf:"fixed64,50,opt,name=total_amount_due,json=totalAmountDue,proto3" json:"total_amount_due"`
	//
	// Application in-lease only
	LeaseCode            string        `protobuf:"bytes,51,opt,name=lease_code,json=leaseCode,proto3" json:"lease_code"`
	LeaseStatus          LeaseStatus   `protobuf:"varint,52,opt,name=lease_status,json=leaseStatus,proto3,enum=rental.LeaseStatus" json:"lease_status"`
	LeaseStartDate       string        `protobuf:"bytes,53,opt,name=lease_start_date,json=leaseStartDate,proto3" json:"lease_start_date"` // in form of 1970-01-01T00:00:00Z (yyyy-MM-ddThh:mm:ssZ)
	LeaseEndDate         string        `protobuf:"bytes,54,opt,name=lease_end_date,json=leaseEndDate,proto3" json:"lease_end_date"`
	CurrentPaymentStatus PaymentStatus `protobuf:"varint,55,opt,name=current_payment_status,json=currentPaymentStatus,proto3,enum=rental.PaymentStatus" json:"current_payment_status"` // only set when accessing Market Lease - related APIs
	RemindedPaymentDate  string        `protobuf:"bytes,56,opt,name=reminded_payment_date,json=remindedPaymentDate,proto3" json:"reminded_payment_date"`
	MarketAddress        string        `protobuf:"bytes,59,opt,name=market_address,json=marketAddress,proto3" json:"market_address"` // fetched from Market service
	ApprovedDate         string        `protobuf:"bytes,61,opt,name=approved_date,json=approvedDate,proto3" json:"approved_date"`
	Draft                bool          `protobuf:"varint,63,opt,name=draft,proto3" json:"draft"` // used in NSA & RSA step 1
}

func (x *Application) Reset() {
	*x = Application{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rental_constant_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Application) ProtoMessage() {}

func (x *Application) ProtoReflect() protoreflect.Message {
	mi := &file_rental_constant_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Application.ProtoReflect.Descriptor instead.
func (*Application) Descriptor() ([]byte, []int) {
	return file_rental_constant_proto_rawDescGZIP(), []int{1}
}

func (x *Application) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *Application) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Application) GetOwner() *ApplicationOwner {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Application) GetMarketCode() string {
	if x != nil {
		return x.MarketCode
	}
	return ""
}

func (x *Application) GetMarketName() string {
	if x != nil {
		return x.MarketName
	}
	return ""
}

func (x *Application) GetMarketType() market.MarketType {
	if x != nil {
		return x.MarketType
	}
	return market.MarketType(0)
}

func (x *Application) GetMarketClass() market.MarketClass {
	if x != nil {
		return x.MarketClass
	}
	return market.MarketClass(0)
}

func (x *Application) GetFloorCode() string {
	if x != nil {
		return x.FloorCode
	}
	return ""
}

func (x *Application) GetFloorName() string {
	if x != nil {
		return x.FloorName
	}
	return ""
}

func (x *Application) GetStallCode() string {
	if x != nil {
		return x.StallCode
	}
	return ""
}

func (x *Application) GetStallType() market.StallType {
	if x != nil {
		return x.StallType
	}
	return market.StallType(0)
}

func (x *Application) GetStallName() string {
	if x != nil {
		return x.StallName
	}
	return ""
}

func (x *Application) GetStallArea() float64 {
	if x != nil {
		return x.StallArea
	}
	return 0
}

func (x *Application) GetStallClass() market.StallClass {
	if x != nil {
		return x.StallClass
	}
	return market.StallClass(0)
}

func (x *Application) GetType() ApplicationType {
	if x != nil {
		return x.Type
	}
	return ApplicationType_NEW_STALL_APP
}

func (x *Application) GetStatus() WorkflowStatus {
	if x != nil {
		return x.Status
	}
	return WorkflowStatus_NEW
}

func (x *Application) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Application) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Application) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Application) GetOtherOccupation() string {
	if x != nil {
		return x.OtherOccupation
	}
	return ""
}

func (x *Application) GetOwnedAnyStall() bool {
	if x != nil {
		return x.OwnedAnyStall
	}
	return false
}

func (x *Application) GetOwnedStallInfo() string {
	if x != nil {
		return x.OwnedStallInfo
	}
	return ""
}

func (x *Application) GetPayTaxPrevious() bool {
	if x != nil {
		return x.PayTaxPrevious
	}
	return false
}

func (x *Application) GetPayTaxPreviousReason() string {
	if x != nil {
		return x.PayTaxPreviousReason
	}
	return ""
}

func (x *Application) GetForcedTerminatePrevious() bool {
	if x != nil {
		return x.ForcedTerminatePrevious
	}
	return false
}

func (x *Application) GetForcedTerminateReason() string {
	if x != nil {
		return x.ForcedTerminateReason
	}
	return ""
}

func (x *Application) GetExchangeRentStall() bool {
	if x != nil {
		return x.ExchangeRentStall
	}
	return false
}

func (x *Application) GetExchangeRentStallName() string {
	if x != nil {
		return x.ExchangeRentStallName
	}
	return ""
}

func (x *Application) GetConvictedViolateLaw() bool {
	if x != nil {
		return x.ConvictedViolateLaw
	}
	return false
}

func (x *Application) GetConvictedViolateLawReason() string {
	if x != nil {
		return x.ConvictedViolateLawReason
	}
	return ""
}

func (x *Application) GetAdministrativeCriminal() bool {
	if x != nil {
		return x.AdministrativeCriminal
	}
	return false
}

func (x *Application) GetAdministrativeCriminalReason() string {
	if x != nil {
		return x.AdministrativeCriminalReason
	}
	return ""
}

func (x *Application) GetCapital() string {
	if x != nil {
		return x.Capital
	}
	return ""
}

func (x *Application) GetSourceOfCapital() string {
	if x != nil {
		return x.SourceOfCapital
	}
	return ""
}

func (x *Application) GetItemType() string {
	if x != nil {
		return x.ItemType
	}
	return ""
}

func (x *Application) GetProofOfResidencies() string {
	if x != nil {
		return x.ProofOfResidencies
	}
	return ""
}

func (x *Application) GetBirthCertificate() string {
	if x != nil {
		return x.BirthCertificate
	}
	return ""
}

func (x *Application) GetPicture() string {
	if x != nil {
		return x.Picture
	}
	return ""
}

func (x *Application) GetPaymentMethod() PaymentMethod {
	if x != nil {
		return x.PaymentMethod
	}
	return PaymentMethod_INVALID_METHOD
}

func (x *Application) GetProofOfTransfer() string {
	if x != nil {
		return x.ProofOfTransfer
	}
	return ""
}

func (x *Application) GetIdentification() string {
	if x != nil {
		return x.Identification
	}
	return ""
}

func (x *Application) GetInitialFee() float64 {
	if x != nil {
		return x.InitialFee
	}
	return 0
}

func (x *Application) GetTotalAmountDue() float64 {
	if x != nil {
		return x.TotalAmountDue
	}
	return 0
}

func (x *Application) GetLeaseCode() string {
	if x != nil {
		return x.LeaseCode
	}
	return ""
}

func (x *Application) GetLeaseStatus() LeaseStatus {
	if x != nil {
		return x.LeaseStatus
	}
	return LeaseStatus_WAITING
}

func (x *Application) GetLeaseStartDate() string {
	if x != nil {
		return x.LeaseStartDate
	}
	return ""
}

func (x *Application) GetLeaseEndDate() string {
	if x != nil {
		return x.LeaseEndDate
	}
	return ""
}

func (x *Application) GetCurrentPaymentStatus() PaymentStatus {
	if x != nil {
		return x.CurrentPaymentStatus
	}
	return PaymentStatus_P_PENDING_PAYMENT
}

func (x *Application) GetRemindedPaymentDate() string {
	if x != nil {
		return x.RemindedPaymentDate
	}
	return ""
}

func (x *Application) GetMarketAddress() string {
	if x != nil {
		return x.MarketAddress
	}
	return ""
}

func (x *Application) GetApprovedDate() string {
	if x != nil {
		return x.ApprovedDate
	}
	return ""
}

func (x *Application) GetDraft() bool {
	if x != nil {
		return x.Draft
	}
	return false
}

type ApplicationOwner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName     string `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name"`
	MiddleName    string `protobuf:"bytes,2,opt,name=middle_name,json=middleName,proto3" json:"middle_name"`
	LastName      string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name"`
	Sex           int32  `protobuf:"varint,4,opt,name=sex,proto3" json:"sex"`
	MaritalStatus int32  `protobuf:"varint,5,opt,name=marital_status,json=maritalStatus,proto3" json:"marital_status"`
	DateOfBirth   string `protobuf:"bytes,7,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth"`
	PlaceOfBirth  string `protobuf:"bytes,8,opt,name=place_of_birth,json=placeOfBirth,proto3" json:"place_of_birth"`
	FartherName   string `protobuf:"bytes,11,opt,name=farther_name,json=fartherName,proto3" json:"farther_name"`
	MotherName    string `protobuf:"bytes,12,opt,name=mother_name,json=motherName,proto3" json:"mother_name"`
	HouseNumber   string `protobuf:"bytes,13,opt,name=house_number,json=houseNumber,proto3" json:"house_number"`
	Street        string `protobuf:"bytes,14,opt,name=street,proto3" json:"street"`
	Province      string `protobuf:"bytes,15,opt,name=province,proto3" json:"province"`
	City          string `protobuf:"bytes,17,opt,name=city,proto3" json:"city"`
	Ward          string `protobuf:"bytes,18,opt,name=ward,proto3" json:"ward"`
	Zipcode       string `protobuf:"bytes,19,opt,name=zipcode,proto3" json:"zipcode"`
	Email         string `protobuf:"bytes,21,opt,name=email,proto3" json:"email"`
	UserId        string `protobuf:"bytes,22,opt,name=user_id,json=userId,proto3" json:"user_id"`
	Age           int32  `protobuf:"varint,23,opt,name=age,proto3" json:"age"` // calculated from date_of_birth
	District      string `protobuf:"bytes,24,opt,name=district,proto3" json:"district"`
	Telephone     string `protobuf:"bytes,25,opt,name=telephone,proto3" json:"telephone"`
	FullName      string `protobuf:"bytes,26,opt,name=full_name,json=fullName,proto3" json:"full_name"`
}

func (x *ApplicationOwner) Reset() {
	*x = ApplicationOwner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rental_constant_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationOwner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationOwner) ProtoMessage() {}

func (x *ApplicationOwner) ProtoReflect() protoreflect.Message {
	mi := &file_rental_constant_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationOwner.ProtoReflect.Descriptor instead.
func (*ApplicationOwner) Descriptor() ([]byte, []int) {
	return file_rental_constant_proto_rawDescGZIP(), []int{2}
}

func (x *ApplicationOwner) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *ApplicationOwner) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *ApplicationOwner) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *ApplicationOwner) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *ApplicationOwner) GetMaritalStatus() int32 {
	if x != nil {
		return x.MaritalStatus
	}
	return 0
}

func (x *ApplicationOwner) GetDateOfBirth() string {
	if x != nil {
		return x.DateOfBirth
	}
	return ""
}

func (x *ApplicationOwner) GetPlaceOfBirth() string {
	if x != nil {
		return x.PlaceOfBirth
	}
	return ""
}

func (x *ApplicationOwner) GetFartherName() string {
	if x != nil {
		return x.FartherName
	}
	return ""
}

func (x *ApplicationOwner) GetMotherName() string {
	if x != nil {
		return x.MotherName
	}
	return ""
}

func (x *ApplicationOwner) GetHouseNumber() string {
	if x != nil {
		return x.HouseNumber
	}
	return ""
}

func (x *ApplicationOwner) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *ApplicationOwner) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *ApplicationOwner) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ApplicationOwner) GetWard() string {
	if x != nil {
		return x.Ward
	}
	return ""
}

func (x *ApplicationOwner) GetZipcode() string {
	if x != nil {
		return x.Zipcode
	}
	return ""
}

func (x *ApplicationOwner) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ApplicationOwner) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ApplicationOwner) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *ApplicationOwner) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *ApplicationOwner) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *ApplicationOwner) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

var File_rental_constant_proto protoreflect.FileDescriptor

var file_rental_constant_proto_rawDesc = []byte{
	0x0a, 0x15, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x1a,
	0x15, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4b, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xe0, 0x11, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2e,
	0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x12, 0x33, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x60, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6f, 0x63,
	0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x26, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x41,
	0x6e, 0x79, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x61, 0x79,
	0x54, 0x61, 0x78, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x70,
	0x61, 0x79, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x61,
	0x79, 0x54, 0x61, 0x78, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x12, 0x36,
	0x0a, 0x17, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x37, 0x0a, 0x18, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x77, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x65, 0x64, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65,
	0x4c, 0x61, 0x77, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x76, 0x69,
	0x63, 0x74, 0x65, 0x64, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x77, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x17, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x44, 0x0a,
	0x1e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a,
	0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x61, 0x70, 0x69, 0x74,
	0x61, 0x6c, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4f, 0x66, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f,
	0x6f, 0x66, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x52, 0x65, 0x73,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x69, 0x72, 0x74, 0x68, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x3c, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x4f,
	0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x46,
	0x65, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x72, 0x61, 0x66, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x64, 0x72, 0x61, 0x66, 0x74, 0x22, 0xe7, 0x04, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61,
	0x72, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66,
	0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f,
	0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x61, 0x72, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x66, 0x61, 0x72, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x61, 0x72, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x2a, 0x62, 0x0a, 0x08, 0x52, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x52, 0x41, 0x54,
	0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x49, 0x47,
	0x48, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54,
	0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x42, 0x4f, 0x4e,
	0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x52, 0x41, 0x54,
	0x45, 0x53, 0x10, 0x03, 0x2a, 0xa0, 0x01, 0x0a, 0x0f, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x52, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x45, 0x57, 0x5f,
	0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x4e, 0x45, 0x57,
	0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x03,
	0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x50, 0x41, 0x49, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x54, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x04, 0x2a, 0x52, 0x0a, 0x11, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b,
	0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x1b, 0x0a, 0x03, 0x53,
	0x65, 0x78, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x2a, 0x40, 0x0a, 0x0b, 0x43, 0x69, 0x76, 0x69,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4e, 0x47, 0x4c,
	0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x52, 0x52, 0x49, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x50, 0x41, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x57, 0x49, 0x44, 0x4f, 0x57, 0x10, 0x03, 0x2a, 0x70, 0x0a, 0x0d, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x50,
	0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x50, 0x5f, 0x50, 0x41, 0x49, 0x44, 0x10, 0x03, 0x2a, 0x59, 0x0a, 0x0b,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x57,
	0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x4f, 0x52, 0x5f, 0x54, 0x45, 0x52, 0x4d,
	0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x52,
	0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x2a, 0x3b, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x45,
	0x57, 0x5f, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x52, 0x45, 0x4e, 0x45, 0x57, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x41,
	0x50, 0x50, 0x10, 0x01, 0x2a, 0x92, 0x01, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x57, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a,
	0x18, 0x46, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x45, 0x52,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x49, 0x53,
	0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x3b, 0x0a, 0x0d, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e,
	0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x2a, 0x41, 0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f,
	0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x42, 0x31, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x2e, 0x73, 0x72, 0x73, 0x2e, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x01, 0x5a, 0x1d, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rental_constant_proto_rawDescOnce sync.Once
	file_rental_constant_proto_rawDescData = file_rental_constant_proto_rawDesc
)

func file_rental_constant_proto_rawDescGZIP() []byte {
	file_rental_constant_proto_rawDescOnce.Do(func() {
		file_rental_constant_proto_rawDescData = protoimpl.X.CompressGZIP(file_rental_constant_proto_rawDescData)
	})
	return file_rental_constant_proto_rawDescData
}

var file_rental_constant_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_rental_constant_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_rental_constant_proto_goTypes = []interface{}{
	(RateType)(0),            // 0: rental.RateType
	(OtherRateDetail)(0),     // 1: rental.OtherRateDetail
	(TerminationStatus)(0),   // 2: rental.TerminationStatus
	(Sex)(0),                 // 3: rental.Sex
	(CivilStatus)(0),         // 4: rental.CivilStatus
	(PaymentStatus)(0),       // 5: rental.PaymentStatus
	(LeaseStatus)(0),         // 6: rental.LeaseStatus
	(ApplicationType)(0),     // 7: rental.ApplicationType
	(WorkflowStatus)(0),      // 8: rental.WorkflowStatus
	(PaymentMethod)(0),       // 9: rental.PaymentMethod
	(ScheduledTask)(0),       // 10: rental.ScheduledTask
	(*Member)(nil),           // 11: rental.Member
	(*Application)(nil),      // 12: rental.Application
	(*ApplicationOwner)(nil), // 13: rental.ApplicationOwner
	(market.MarketType)(0),   // 14: market.MarketType
	(market.MarketClass)(0),  // 15: market.MarketClass
	(market.StallType)(0),    // 16: market.StallType
	(market.StallClass)(0),   // 17: market.StallClass
}
var file_rental_constant_proto_depIdxs = []int32{
	13, // 0: rental.Application.owner:type_name -> rental.ApplicationOwner
	14, // 1: rental.Application.market_type:type_name -> market.MarketType
	15, // 2: rental.Application.market_class:type_name -> market.MarketClass
	16, // 3: rental.Application.stall_type:type_name -> market.StallType
	17, // 4: rental.Application.stall_class:type_name -> market.StallClass
	7,  // 5: rental.Application.type:type_name -> rental.ApplicationType
	8,  // 6: rental.Application.status:type_name -> rental.WorkflowStatus
	11, // 7: rental.Application.members:type_name -> rental.Member
	9,  // 8: rental.Application.payment_method:type_name -> rental.PaymentMethod
	6,  // 9: rental.Application.lease_status:type_name -> rental.LeaseStatus
	5,  // 10: rental.Application.current_payment_status:type_name -> rental.PaymentStatus
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_rental_constant_proto_init() }
func file_rental_constant_proto_init() {
	if File_rental_constant_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rental_constant_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rental_constant_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Application); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rental_constant_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationOwner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rental_constant_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rental_constant_proto_goTypes,
		DependencyIndexes: file_rental_constant_proto_depIdxs,
		EnumInfos:         file_rental_constant_proto_enumTypes,
		MessageInfos:      file_rental_constant_proto_msgTypes,
	}.Build()
	File_rental_constant_proto = out.File
	file_rental_constant_proto_rawDesc = nil
	file_rental_constant_proto_goTypes = nil
	file_rental_constant_proto_depIdxs = nil
}
