// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        v3.15.8
// source: market/constant.proto

package market

import (
	common "gateway-service/client/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

///////////////////////////////////////////////////////////////////
// Market Enums
///////////////////////////////////////////////////////////////////
type MarketState int32

const (
	MarketState_MARKET_STATE_UNSPECIFIED MarketState = 0
	MarketState_MARKET_STATE_UNPUBLISHED MarketState = 1
	MarketState_MARKET_STATE_PUBLISHED   MarketState = 2
)

// Enum value maps for MarketState.
var (
	MarketState_name = map[int32]string{
		0: "MARKET_STATE_UNSPECIFIED",
		1: "MARKET_STATE_UNPUBLISHED",
		2: "MARKET_STATE_PUBLISHED",
	}
	MarketState_value = map[string]int32{
		"MARKET_STATE_UNSPECIFIED": 0,
		"MARKET_STATE_UNPUBLISHED": 1,
		"MARKET_STATE_PUBLISHED":   2,
	}
)

func (x MarketState) Enum() *MarketState {
	p := new(MarketState)
	*p = x
	return p
}

func (x MarketState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketState) Descriptor() protoreflect.EnumDescriptor {
	return file_market_constant_proto_enumTypes[0].Descriptor()
}

func (MarketState) Type() protoreflect.EnumType {
	return &file_market_constant_proto_enumTypes[0]
}

func (x MarketState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarketState.Descriptor instead.
func (MarketState) EnumDescriptor() ([]byte, []int) {
	return file_market_constant_proto_rawDescGZIP(), []int{0}
}

type MarketStatus int32

const (
	MarketStatus_MARKET_STATUS_UNSPECIFIED       MarketStatus = 0
	MarketStatus_MARKET_STATUS_INACTIVE          MarketStatus = 1
	MarketStatus_MARKET_STATUS_ACTIVE            MarketStatus = 2
	MarketStatus_MARKET_STATUS_FRANCHISE_EXPIRED MarketStatus = 3
)

// Enum value maps for MarketStatus.
var (
	MarketStatus_name = map[int32]string{
		0: "MARKET_STATUS_UNSPECIFIED",
		1: "MARKET_STATUS_INACTIVE",
		2: "MARKET_STATUS_ACTIVE",
		3: "MARKET_STATUS_FRANCHISE_EXPIRED",
	}
	MarketStatus_value = map[string]int32{
		"MARKET_STATUS_UNSPECIFIED":       0,
		"MARKET_STATUS_INACTIVE":          1,
		"MARKET_STATUS_ACTIVE":            2,
		"MARKET_STATUS_FRANCHISE_EXPIRED": 3,
	}
)

func (x MarketStatus) Enum() *MarketStatus {
	p := new(MarketStatus)
	*p = x
	return p
}

func (x MarketStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_market_constant_proto_enumTypes[1].Descriptor()
}

func (MarketStatus) Type() protoreflect.EnumType {
	return &file_market_constant_proto_enumTypes[1]
}

func (x MarketStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarketStatus.Descriptor instead.
func (MarketStatus) EnumDescriptor() ([]byte, []int) {
	return file_market_constant_proto_rawDescGZIP(), []int{1}
}

type MarketType int32

const (
	MarketType_MARKET_TYPE_UNSPECIFIED MarketType = 0
	MarketType_MARKET_TYPE_PUBLIC      MarketType = 1
	MarketType_MARKET_TYPE_PRIVATE     MarketType = 2
	MarketType_MARKET_TYPE_HAWKER      MarketType = 3
	MarketType_MARKET_TYPE_TALIPAPA    MarketType = 4
)

// Enum value maps for MarketType.
var (
	MarketType_name = map[int32]string{
		0: "MARKET_TYPE_UNSPECIFIED",
		1: "MARKET_TYPE_PUBLIC",
		2: "MARKET_TYPE_PRIVATE",
		3: "MARKET_TYPE_HAWKER",
		4: "MARKET_TYPE_TALIPAPA",
	}
	MarketType_value = map[string]int32{
		"MARKET_TYPE_UNSPECIFIED": 0,
		"MARKET_TYPE_PUBLIC":      1,
		"MARKET_TYPE_PRIVATE":     2,
		"MARKET_TYPE_HAWKER":      3,
		"MARKET_TYPE_TALIPAPA":    4,
	}
)

func (x MarketType) Enum() *MarketType {
	p := new(MarketType)
	*p = x
	return p
}

func (x MarketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketType) Descriptor() protoreflect.EnumDescriptor {
	return file_market_constant_proto_enumTypes[2].Descriptor()
}

func (MarketType) Type() protoreflect.EnumType {
	return &file_market_constant_proto_enumTypes[2]
}

func (x MarketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarketType.Descriptor instead.
func (MarketType) EnumDescriptor() ([]byte, []int) {
	return file_market_constant_proto_rawDescGZIP(), []int{2}
}

type MarketClass int32

const (
	MarketClass_MARKET_CLASS_UNSPECIFIED MarketClass = 0
	MarketClass_MARKET_CLASS_A           MarketClass = 1
	MarketClass_MARKET_CLASS_B           MarketClass = 2
	MarketClass_MARKET_CLASS_C           MarketClass = 3
)

// Enum value maps for MarketClass.
var (
	MarketClass_name = map[int32]string{
		0: "MARKET_CLASS_UNSPECIFIED",
		1: "MARKET_CLASS_A",
		2: "MARKET_CLASS_B",
		3: "MARKET_CLASS_C",
	}
	MarketClass_value = map[string]int32{
		"MARKET_CLASS_UNSPECIFIED": 0,
		"MARKET_CLASS_A":           1,
		"MARKET_CLASS_B":           2,
		"MARKET_CLASS_C":           3,
	}
)

func (x MarketClass) Enum() *MarketClass {
	p := new(MarketClass)
	*p = x
	return p
}

func (x MarketClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketClass) Descriptor() protoreflect.EnumDescriptor {
	return file_market_constant_proto_enumTypes[3].Descriptor()
}

func (MarketClass) Type() protoreflect.EnumType {
	return &file_market_constant_proto_enumTypes[3]
}

func (x MarketClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarketClass.Descriptor instead.
func (MarketClass) EnumDescriptor() ([]byte, []int) {
	return file_market_constant_proto_rawDescGZIP(), []int{3}
}

///////////////////////////////////////////////////////////////////
// Floor Enums
///////////////////////////////////////////////////////////////////
type FloorState int32

const (
	FloorState_FLOOR_STATE_UNSPECIFIED FloorState = 0
	FloorState_FLOOR_STATE_UNPUBLISHED FloorState = 1
	FloorState_FLOOR_STATE_PUBLISHED   FloorState = 2
)

// Enum value maps for FloorState.
var (
	FloorState_name = map[int32]string{
		0: "FLOOR_STATE_UNSPECIFIED",
		1: "FLOOR_STATE_UNPUBLISHED",
		2: "FLOOR_STATE_PUBLISHED",
	}
	FloorState_value = map[string]int32{
		"FLOOR_STATE_UNSPECIFIED": 0,
		"FLOOR_STATE_UNPUBLISHED": 1,
		"FLOOR_STATE_PUBLISHED":   2,
	}
)

func (x FloorState) Enum() *FloorState {
	p := new(FloorState)
	*p = x
	return p
}

func (x FloorState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FloorState) Descriptor() protoreflect.EnumDescriptor {
	return file_market_constant_proto_enumTypes[4].Descriptor()
}

func (FloorState) Type() protoreflect.EnumType {
	return &file_market_constant_proto_enumTypes[4]
}

func (x FloorState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FloorState.Descriptor instead.
func (FloorState) EnumDescriptor() ([]byte, []int) {
	return file_market_constant_proto_rawDescGZIP(), []int{4}
}

///////////////////////////////////////////////////////////////////
// Stall Enums
///////////////////////////////////////////////////////////////////
type StallClass int32

const (
	StallClass_STALL_CLASS_UNSPECIFIED   StallClass = 0
	StallClass_STALL_CLASS_REGULAR       StallClass = 1
	StallClass_STALL_CLASS_FRONT_CORNER  StallClass = 2
	StallClass_STALL_CLASS_FRONT         StallClass = 3
	StallClass_STALL_CLASS_INSIDE_CORNER StallClass = 4
)

// Enum value maps for StallClass.
var (
	StallClass_name = map[int32]string{
		0: "STALL_CLASS_UNSPECIFIED",
		1: "STALL_CLASS_REGULAR",
		2: "STALL_CLASS_FRONT_CORNER",
		3: "STALL_CLASS_FRONT",
		4: "STALL_CLASS_INSIDE_CORNER",
	}
	StallClass_value = map[string]int32{
		"STALL_CLASS_UNSPECIFIED":   0,
		"STALL_CLASS_REGULAR":       1,
		"STALL_CLASS_FRONT_CORNER":  2,
		"STALL_CLASS_FRONT":         3,
		"STALL_CLASS_INSIDE_CORNER": 4,
	}
)

func (x StallClass) Enum() *StallClass {
	p := new(StallClass)
	*p = x
	return p
}

func (x StallClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StallClass) Descriptor() protoreflect.EnumDescriptor {
	return file_market_constant_proto_enumTypes[5].Descriptor()
}

func (StallClass) Type() protoreflect.EnumType {
	return &file_market_constant_proto_enumTypes[5]
}

func (x StallClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StallClass.Descriptor instead.
func (StallClass) EnumDescriptor() ([]byte, []int) {
	return file_market_constant_proto_rawDescGZIP(), []int{5}
}

type StallState int32

const (
	StallState_STALL_STATE_UNSPECIFIED StallState = 0
	StallState_STALL_STATE_UNPUBLISHED StallState = 1
	StallState_STALL_STATE_PUBLISHED   StallState = 2
)

// Enum value maps for StallState.
var (
	StallState_name = map[int32]string{
		0: "STALL_STATE_UNSPECIFIED",
		1: "STALL_STATE_UNPUBLISHED",
		2: "STALL_STATE_PUBLISHED",
	}
	StallState_value = map[string]int32{
		"STALL_STATE_UNSPECIFIED": 0,
		"STALL_STATE_UNPUBLISHED": 1,
		"STALL_STATE_PUBLISHED":   2,
	}
)

func (x StallState) Enum() *StallState {
	p := new(StallState)
	*p = x
	return p
}

func (x StallState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StallState) Descriptor() protoreflect.EnumDescriptor {
	return file_market_constant_proto_enumTypes[6].Descriptor()
}

func (StallState) Type() protoreflect.EnumType {
	return &file_market_constant_proto_enumTypes[6]
}

func (x StallState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StallState.Descriptor instead.
func (StallState) EnumDescriptor() ([]byte, []int) {
	return file_market_constant_proto_rawDescGZIP(), []int{6}
}

type StallStatus int32

const (
	StallStatus_STALL_STATUS_UNSPECIFIED StallStatus = 0
	StallStatus_STALL_STATUS_INACTIVE    StallStatus = 1
	StallStatus_STALL_STATUS_ACTIVE      StallStatus = 2
)

// Enum value maps for StallStatus.
var (
	StallStatus_name = map[int32]string{
		0: "STALL_STATUS_UNSPECIFIED",
		1: "STALL_STATUS_INACTIVE",
		2: "STALL_STATUS_ACTIVE",
	}
	StallStatus_value = map[string]int32{
		"STALL_STATUS_UNSPECIFIED": 0,
		"STALL_STATUS_INACTIVE":    1,
		"STALL_STATUS_ACTIVE":      2,
	}
)

func (x StallStatus) Enum() *StallStatus {
	p := new(StallStatus)
	*p = x
	return p
}

func (x StallStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StallStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_market_constant_proto_enumTypes[7].Descriptor()
}

func (StallStatus) Type() protoreflect.EnumType {
	return &file_market_constant_proto_enumTypes[7]
}

func (x StallStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StallStatus.Descriptor instead.
func (StallStatus) EnumDescriptor() ([]byte, []int) {
	return file_market_constant_proto_rawDescGZIP(), []int{7}
}

type StallType int32

const (
	StallType_STALL_TYPE_UNSPECIFIED StallType = 0
	StallType_STALL_TYPE_TEMPORARY   StallType = 1
	StallType_STALL_TYPE_PERMANENT   StallType = 2
)

// Enum value maps for StallType.
var (
	StallType_name = map[int32]string{
		0: "STALL_TYPE_UNSPECIFIED",
		1: "STALL_TYPE_TEMPORARY",
		2: "STALL_TYPE_PERMANENT",
	}
	StallType_value = map[string]int32{
		"STALL_TYPE_UNSPECIFIED": 0,
		"STALL_TYPE_TEMPORARY":   1,
		"STALL_TYPE_PERMANENT":   2,
	}
)

func (x StallType) Enum() *StallType {
	p := new(StallType)
	*p = x
	return p
}

func (x StallType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StallType) Descriptor() protoreflect.EnumDescriptor {
	return file_market_constant_proto_enumTypes[8].Descriptor()
}

func (StallType) Type() protoreflect.EnumType {
	return &file_market_constant_proto_enumTypes[8]
}

func (x StallType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StallType.Descriptor instead.
func (StallType) EnumDescriptor() ([]byte, []int) {
	return file_market_constant_proto_rawDescGZIP(), []int{8}
}

type Choice int32

const (
	Choice_FALSE     Choice = 0
	Choice_TRUE      Choice = 1
	Choice_NOT_GIVEN Choice = 2
)

// Enum value maps for Choice.
var (
	Choice_name = map[int32]string{
		0: "FALSE",
		1: "TRUE",
		2: "NOT_GIVEN",
	}
	Choice_value = map[string]int32{
		"FALSE":     0,
		"TRUE":      1,
		"NOT_GIVEN": 2,
	}
)

func (x Choice) Enum() *Choice {
	p := new(Choice)
	*p = x
	return p
}

func (x Choice) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Choice) Descriptor() protoreflect.EnumDescriptor {
	return file_market_constant_proto_enumTypes[9].Descriptor()
}

func (Choice) Type() protoreflect.EnumType {
	return &file_market_constant_proto_enumTypes[9]
}

func (x Choice) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Choice.Descriptor instead.
func (Choice) EnumDescriptor() ([]byte, []int) {
	return file_market_constant_proto_rawDescGZIP(), []int{9}
}

type StallLeaseStatus int32

const (
	StallLeaseStatus_STALL_AVAILABLE StallLeaseStatus = 0
	StallLeaseStatus_STALL_RESERVED  StallLeaseStatus = 1
	StallLeaseStatus_STALL_OCCUPIED  StallLeaseStatus = 2
)

// Enum value maps for StallLeaseStatus.
var (
	StallLeaseStatus_name = map[int32]string{
		0: "STALL_AVAILABLE",
		1: "STALL_RESERVED",
		2: "STALL_OCCUPIED",
	}
	StallLeaseStatus_value = map[string]int32{
		"STALL_AVAILABLE": 0,
		"STALL_RESERVED":  1,
		"STALL_OCCUPIED":  2,
	}
)

func (x StallLeaseStatus) Enum() *StallLeaseStatus {
	p := new(StallLeaseStatus)
	*p = x
	return p
}

func (x StallLeaseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StallLeaseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_market_constant_proto_enumTypes[10].Descriptor()
}

func (StallLeaseStatus) Type() protoreflect.EnumType {
	return &file_market_constant_proto_enumTypes[10]
}

func (x StallLeaseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StallLeaseStatus.Descriptor instead.
func (StallLeaseStatus) EnumDescriptor() ([]byte, []int) {
	return file_market_constant_proto_rawDescGZIP(), []int{10}
}

type HawkerSiteType int32

const (
	HawkerSiteType_NOT_HAWKER   HawkerSiteType = 0
	HawkerSiteType_VENDING_SITE HawkerSiteType = 1
	HawkerSiteType_AMBULANT     HawkerSiteType = 2
)

// Enum value maps for HawkerSiteType.
var (
	HawkerSiteType_name = map[int32]string{
		0: "NOT_HAWKER",
		1: "VENDING_SITE",
		2: "AMBULANT",
	}
	HawkerSiteType_value = map[string]int32{
		"NOT_HAWKER":   0,
		"VENDING_SITE": 1,
		"AMBULANT":     2,
	}
)

func (x HawkerSiteType) Enum() *HawkerSiteType {
	p := new(HawkerSiteType)
	*p = x
	return p
}

func (x HawkerSiteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HawkerSiteType) Descriptor() protoreflect.EnumDescriptor {
	return file_market_constant_proto_enumTypes[11].Descriptor()
}

func (HawkerSiteType) Type() protoreflect.EnumType {
	return &file_market_constant_proto_enumTypes[11]
}

func (x HawkerSiteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HawkerSiteType.Descriptor instead.
func (HawkerSiteType) EnumDescriptor() ([]byte, []int) {
	return file_market_constant_proto_rawDescGZIP(), []int{11}
}

type DayOfWeek int32

const (
	DayOfWeek_INVALID_DAY DayOfWeek = 0
	DayOfWeek_MONDAY      DayOfWeek = 1
	DayOfWeek_TUESDAY     DayOfWeek = 2
	DayOfWeek_WEDNESDAY   DayOfWeek = 3
	DayOfWeek_THURSDAY    DayOfWeek = 4
	DayOfWeek_FRIDAY      DayOfWeek = 5
	DayOfWeek_SATURDAY    DayOfWeek = 6
	DayOfWeek_SUNDAY      DayOfWeek = 7
)

// Enum value maps for DayOfWeek.
var (
	DayOfWeek_name = map[int32]string{
		0: "INVALID_DAY",
		1: "MONDAY",
		2: "TUESDAY",
		3: "WEDNESDAY",
		4: "THURSDAY",
		5: "FRIDAY",
		6: "SATURDAY",
		7: "SUNDAY",
	}
	DayOfWeek_value = map[string]int32{
		"INVALID_DAY": 0,
		"MONDAY":      1,
		"TUESDAY":     2,
		"WEDNESDAY":   3,
		"THURSDAY":    4,
		"FRIDAY":      5,
		"SATURDAY":    6,
		"SUNDAY":      7,
	}
)

func (x DayOfWeek) Enum() *DayOfWeek {
	p := new(DayOfWeek)
	*p = x
	return p
}

func (x DayOfWeek) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DayOfWeek) Descriptor() protoreflect.EnumDescriptor {
	return file_market_constant_proto_enumTypes[12].Descriptor()
}

func (DayOfWeek) Type() protoreflect.EnumType {
	return &file_market_constant_proto_enumTypes[12]
}

func (x DayOfWeek) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DayOfWeek.Descriptor instead.
func (DayOfWeek) EnumDescriptor() ([]byte, []int) {
	return file_market_constant_proto_rawDescGZIP(), []int{12}
}

type CountStallsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success"`
	// Types that are assignable to Response:
	//	*CountStallsResponse_Data_
	//	*CountStallsResponse_Error
	Response isCountStallsResponse_Response `protobuf_oneof:"response"`
}

func (x *CountStallsResponse) Reset() {
	*x = CountStallsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_constant_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountStallsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountStallsResponse) ProtoMessage() {}

func (x *CountStallsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_constant_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountStallsResponse.ProtoReflect.Descriptor instead.
func (*CountStallsResponse) Descriptor() ([]byte, []int) {
	return file_market_constant_proto_rawDescGZIP(), []int{0}
}

func (x *CountStallsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (m *CountStallsResponse) GetResponse() isCountStallsResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *CountStallsResponse) GetData() *CountStallsResponse_Data {
	if x, ok := x.GetResponse().(*CountStallsResponse_Data_); ok {
		return x.Data
	}
	return nil
}

func (x *CountStallsResponse) GetError() *common.Error {
	if x, ok := x.GetResponse().(*CountStallsResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isCountStallsResponse_Response interface {
	isCountStallsResponse_Response()
}

type CountStallsResponse_Data_ struct {
	Data *CountStallsResponse_Data `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

type CountStallsResponse_Error struct {
	Error *common.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*CountStallsResponse_Data_) isCountStallsResponse_Response() {}

func (*CountStallsResponse_Error) isCountStallsResponse_Response() {}

///////////////////////////////////////////////////////////////////
// List Market
///////////////////////////////////////////////////////////////////
type ListMarketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageRequest   *common.PageRequest `protobuf:"bytes,1,opt,name=page_request,json=pageRequest,proto3" json:"page_request"`
	SearchTerm    *string             `protobuf:"bytes,2,opt,name=search_term,json=searchTerm,proto3,oneof" json:"search_term"`
	Types         []MarketType        `protobuf:"varint,3,rep,packed,name=types,proto3,enum=market.MarketType" json:"types"`
	SiteTypes     []HawkerSiteType    `protobuf:"varint,4,rep,packed,name=site_types,json=siteTypes,proto3,enum=market.HawkerSiteType" json:"site_types"`
	All           bool                `protobuf:"varint,5,opt,name=all,proto3" json:"all"`
	Name          string              `protobuf:"bytes,6,opt,name=name,proto3" json:"name"`
	Codes         []string            `protobuf:"bytes,7,rep,name=codes,proto3" json:"codes"`
	PublishedOnly bool                `protobuf:"varint,8,opt,name=published_only,json=publishedOnly,proto3" json:"published_only"`
}

func (x *ListMarketsRequest) Reset() {
	*x = ListMarketsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_constant_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMarketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMarketsRequest) ProtoMessage() {}

func (x *ListMarketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_constant_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMarketsRequest.ProtoReflect.Descriptor instead.
func (*ListMarketsRequest) Descriptor() ([]byte, []int) {
	return file_market_constant_proto_rawDescGZIP(), []int{1}
}

func (x *ListMarketsRequest) GetPageRequest() *common.PageRequest {
	if x != nil {
		return x.PageRequest
	}
	return nil
}

func (x *ListMarketsRequest) GetSearchTerm() string {
	if x != nil && x.SearchTerm != nil {
		return *x.SearchTerm
	}
	return ""
}

func (x *ListMarketsRequest) GetTypes() []MarketType {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *ListMarketsRequest) GetSiteTypes() []HawkerSiteType {
	if x != nil {
		return x.SiteTypes
	}
	return nil
}

func (x *ListMarketsRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *ListMarketsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListMarketsRequest) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

func (x *ListMarketsRequest) GetPublishedOnly() bool {
	if x != nil {
		return x.PublishedOnly
	}
	return false
}

type CountStallsResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalStalls     int64                  `protobuf:"varint,1,opt,name=total_stalls,json=totalStalls,proto3" json:"total_stalls"`
	AvailableDate   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=available_date,json=availableDate,proto3" json:"available_date"`
	AvailableStalls int64                  `protobuf:"varint,3,opt,name=available_stalls,json=availableStalls,proto3" json:"available_stalls"`
	ReservedStalls  int64                  `protobuf:"varint,4,opt,name=reserved_stalls,json=reservedStalls,proto3" json:"reserved_stalls"`
	OccupiedStalls  int64                  `protobuf:"varint,5,opt,name=occupied_stalls,json=occupiedStalls,proto3" json:"occupied_stalls"`
}

func (x *CountStallsResponse_Data) Reset() {
	*x = CountStallsResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_constant_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountStallsResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountStallsResponse_Data) ProtoMessage() {}

func (x *CountStallsResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_market_constant_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountStallsResponse_Data.ProtoReflect.Descriptor instead.
func (*CountStallsResponse_Data) Descriptor() ([]byte, []int) {
	return file_market_constant_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CountStallsResponse_Data) GetTotalStalls() int64 {
	if x != nil {
		return x.TotalStalls
	}
	return 0
}

func (x *CountStallsResponse_Data) GetAvailableDate() *timestamppb.Timestamp {
	if x != nil {
		return x.AvailableDate
	}
	return nil
}

func (x *CountStallsResponse_Data) GetAvailableStalls() int64 {
	if x != nil {
		return x.AvailableStalls
	}
	return 0
}

func (x *CountStallsResponse_Data) GetReservedStalls() int64 {
	if x != nil {
		return x.ReservedStalls
	}
	return 0
}

func (x *CountStallsResponse_Data) GetOccupiedStalls() int64 {
	if x != nil {
		return x.OccupiedStalls
	}
	return 0
}

var File_market_constant_proto protoreflect.FileDescriptor

var file_market_constant_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86, 0x03, 0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0xe9, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6c,
	0x6c, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x63, 0x63,
	0x75, 0x70, 0x69, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6c,
	0x6c, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc6,
	0x02, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x35, 0x0a,
	0x0a, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x48, 0x61, 0x77, 0x6b, 0x65,
	0x72, 0x53, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x69, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x2a, 0x65, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x88,
	0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1d, 0x0a, 0x19, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x49, 0x53, 0x45, 0x5f,
	0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x8c, 0x01, 0x0a, 0x0a, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x49,
	0x56, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x57, 0x4b, 0x45, 0x52, 0x10, 0x03, 0x12, 0x18,
	0x0a, 0x14, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41,
	0x4c, 0x49, 0x50, 0x41, 0x50, 0x41, 0x10, 0x04, 0x2a, 0x67, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x52, 0x4b, 0x45,
	0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x41, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x52,
	0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x42, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x43, 0x10,
	0x03, 0x2a, 0x61, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1b, 0x0a, 0x17, 0x46, 0x4c, 0x4f, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x46, 0x4c, 0x4f, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x4c, 0x4f,
	0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48,
	0x45, 0x44, 0x10, 0x02, 0x2a, 0x96, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41,
	0x4c, 0x4c, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x5f, 0x43,
	0x4f, 0x52, 0x4e, 0x45, 0x52, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x4c, 0x4c,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x1d,
	0x0a, 0x19, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x49, 0x4e,
	0x53, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x52, 0x4e, 0x45, 0x52, 0x10, 0x04, 0x2a, 0x61, 0x0a,
	0x0a, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53,
	0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x4c,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53,
	0x48, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02,
	0x2a, 0x5f, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x4c,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x02, 0x2a, 0x5b, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54,
	0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x41,
	0x52, 0x59, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x41, 0x4e, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x2a, 0x2c,
	0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x4c, 0x53,
	0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x52, 0x55, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x4e, 0x10, 0x02, 0x2a, 0x4f, 0x0a, 0x10,
	0x53, 0x74, 0x61, 0x6c, 0x6c, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x52,
	0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41,
	0x4c, 0x4c, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x49, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x40, 0x0a,
	0x0e, 0x48, 0x61, 0x77, 0x6b, 0x65, 0x72, 0x53, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x54, 0x5f, 0x48, 0x41, 0x57, 0x4b, 0x45, 0x52, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x56, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x49, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4d, 0x42, 0x55, 0x4c, 0x41, 0x4e, 0x54, 0x10, 0x02, 0x2a,
	0x78, 0x0a, 0x09, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x0f, 0x0a, 0x0b,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x4f, 0x4e, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x55, 0x45,
	0x53, 0x44, 0x41, 0x59, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x45, 0x44, 0x4e, 0x45, 0x53,
	0x44, 0x41, 0x59, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x48, 0x55, 0x52, 0x53, 0x44, 0x41,
	0x59, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x52, 0x49, 0x44, 0x41, 0x59, 0x10, 0x05, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x41, 0x54, 0x55, 0x52, 0x44, 0x41, 0x59, 0x10, 0x06, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x55, 0x4e, 0x44, 0x41, 0x59, 0x10, 0x07, 0x42, 0x34, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x01,
	0x5a, 0x1d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_market_constant_proto_rawDescOnce sync.Once
	file_market_constant_proto_rawDescData = file_market_constant_proto_rawDesc
)

func file_market_constant_proto_rawDescGZIP() []byte {
	file_market_constant_proto_rawDescOnce.Do(func() {
		file_market_constant_proto_rawDescData = protoimpl.X.CompressGZIP(file_market_constant_proto_rawDescData)
	})
	return file_market_constant_proto_rawDescData
}

var file_market_constant_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_market_constant_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_market_constant_proto_goTypes = []interface{}{
	(MarketState)(0),                 // 0: market.MarketState
	(MarketStatus)(0),                // 1: market.MarketStatus
	(MarketType)(0),                  // 2: market.MarketType
	(MarketClass)(0),                 // 3: market.MarketClass
	(FloorState)(0),                  // 4: market.FloorState
	(StallClass)(0),                  // 5: market.StallClass
	(StallState)(0),                  // 6: market.StallState
	(StallStatus)(0),                 // 7: market.StallStatus
	(StallType)(0),                   // 8: market.StallType
	(Choice)(0),                      // 9: market.Choice
	(StallLeaseStatus)(0),            // 10: market.StallLeaseStatus
	(HawkerSiteType)(0),              // 11: market.HawkerSiteType
	(DayOfWeek)(0),                   // 12: market.DayOfWeek
	(*CountStallsResponse)(nil),      // 13: market.CountStallsResponse
	(*ListMarketsRequest)(nil),       // 14: market.ListMarketsRequest
	(*CountStallsResponse_Data)(nil), // 15: market.CountStallsResponse.Data
	(*common.Error)(nil),             // 16: common.Error
	(*common.PageRequest)(nil),       // 17: common.PageRequest
	(*timestamppb.Timestamp)(nil),    // 18: google.protobuf.Timestamp
}
var file_market_constant_proto_depIdxs = []int32{
	15, // 0: market.CountStallsResponse.data:type_name -> market.CountStallsResponse.Data
	16, // 1: market.CountStallsResponse.error:type_name -> common.Error
	17, // 2: market.ListMarketsRequest.page_request:type_name -> common.PageRequest
	2,  // 3: market.ListMarketsRequest.types:type_name -> market.MarketType
	11, // 4: market.ListMarketsRequest.site_types:type_name -> market.HawkerSiteType
	18, // 5: market.CountStallsResponse.Data.available_date:type_name -> google.protobuf.Timestamp
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_market_constant_proto_init() }
func file_market_constant_proto_init() {
	if File_market_constant_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_market_constant_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountStallsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_constant_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMarketsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_constant_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountStallsResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_market_constant_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*CountStallsResponse_Data_)(nil),
		(*CountStallsResponse_Error)(nil),
	}
	file_market_constant_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_market_constant_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_market_constant_proto_goTypes,
		DependencyIndexes: file_market_constant_proto_depIdxs,
		EnumInfos:         file_market_constant_proto_enumTypes,
		MessageInfos:      file_market_constant_proto_msgTypes,
	}.Build()
	File_market_constant_proto = out.File
	file_market_constant_proto_rawDesc = nil
	file_market_constant_proto_goTypes = nil
	file_market_constant_proto_depIdxs = nil
}
