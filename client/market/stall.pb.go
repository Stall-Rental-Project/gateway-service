// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        v3.21.8
// source: market/stall.proto

package market

import (
	common "gateway-service/client/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateStallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FloorplanId string       `protobuf:"bytes,1,opt,name=floorplan_id,json=floorplanId,proto3" json:"floorplan_id"`
	Name        string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Status      *StallStatus `protobuf:"varint,3,opt,name=status,proto3,enum=market.StallStatus,oneof" json:"status"`
	Type        *StallType   `protobuf:"varint,4,opt,name=type,proto3,enum=market.StallType,oneof" json:"type"`
	Clazz       *StallClass  `protobuf:"varint,5,opt,name=clazz,proto3,enum=market.StallClass,oneof" json:"clazz"`
	Area        *float64     `protobuf:"fixed64,6,opt,name=area,proto3,oneof" json:"area"`
	Shape       *string      `protobuf:"bytes,7,opt,name=shape,proto3,oneof" json:"shape"`
	XAxis       *float64     `protobuf:"fixed64,8,opt,name=x_axis,json=xAxis,proto3,oneof" json:"x_axis"`
	YAxis       *float64     `protobuf:"fixed64,9,opt,name=y_axis,json=yAxis,proto3,oneof" json:"y_axis"`
	WAxis       *float64     `protobuf:"fixed64,10,opt,name=w_axis,json=wAxis,proto3,oneof" json:"w_axis"`
	HAxis       *float64     `protobuf:"fixed64,11,opt,name=h_axis,json=hAxis,proto3,oneof" json:"h_axis"`
	Points      []*Point     `protobuf:"bytes,12,rep,name=points,proto3" json:"points"`
	Label       *string      `protobuf:"bytes,13,opt,name=label,proto3,oneof" json:"label"`
	Rotate      *int32       `protobuf:"varint,14,opt,name=rotate,proto3,oneof" json:"rotate"`
	FontSize    *float64     `protobuf:"fixed64,15,opt,name=font_size,json=fontSize,proto3,oneof" json:"font_size"`
}

func (x *CreateStallRequest) Reset() {
	*x = CreateStallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_stall_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStallRequest) ProtoMessage() {}

func (x *CreateStallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_stall_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStallRequest.ProtoReflect.Descriptor instead.
func (*CreateStallRequest) Descriptor() ([]byte, []int) {
	return file_market_stall_proto_rawDescGZIP(), []int{0}
}

func (x *CreateStallRequest) GetFloorplanId() string {
	if x != nil {
		return x.FloorplanId
	}
	return ""
}

func (x *CreateStallRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateStallRequest) GetStatus() StallStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return StallStatus_STALL_STATUS_UNSPECIFIED
}

func (x *CreateStallRequest) GetType() StallType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return StallType_STALL_TYPE_UNSPECIFIED
}

func (x *CreateStallRequest) GetClazz() StallClass {
	if x != nil && x.Clazz != nil {
		return *x.Clazz
	}
	return StallClass_STALL_CLASS_UNSPECIFIED
}

func (x *CreateStallRequest) GetArea() float64 {
	if x != nil && x.Area != nil {
		return *x.Area
	}
	return 0
}

func (x *CreateStallRequest) GetShape() string {
	if x != nil && x.Shape != nil {
		return *x.Shape
	}
	return ""
}

func (x *CreateStallRequest) GetXAxis() float64 {
	if x != nil && x.XAxis != nil {
		return *x.XAxis
	}
	return 0
}

func (x *CreateStallRequest) GetYAxis() float64 {
	if x != nil && x.YAxis != nil {
		return *x.YAxis
	}
	return 0
}

func (x *CreateStallRequest) GetWAxis() float64 {
	if x != nil && x.WAxis != nil {
		return *x.WAxis
	}
	return 0
}

func (x *CreateStallRequest) GetHAxis() float64 {
	if x != nil && x.HAxis != nil {
		return *x.HAxis
	}
	return 0
}

func (x *CreateStallRequest) GetPoints() []*Point {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *CreateStallRequest) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *CreateStallRequest) GetRotate() int32 {
	if x != nil && x.Rotate != nil {
		return *x.Rotate
	}
	return 0
}

func (x *CreateStallRequest) GetFontSize() float64 {
	if x != nil && x.FontSize != nil {
		return *x.FontSize
	}
	return 0
}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XAxis float64 `protobuf:"fixed64,1,opt,name=x_axis,json=xAxis,proto3" json:"x_axis"`
	YAxis float64 `protobuf:"fixed64,2,opt,name=y_axis,json=yAxis,proto3" json:"y_axis"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_stall_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_market_stall_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_market_stall_proto_rawDescGZIP(), []int{1}
}

func (x *Point) GetXAxis() float64 {
	if x != nil {
		return x.XAxis
	}
	return 0
}

func (x *Point) GetYAxis() float64 {
	if x != nil {
		return x.YAxis
	}
	return 0
}

///////////////////////////////////////////////////////////////////
// Shared payloads
///////////////////////////////////////////////////////////////////
type Stall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StallId         string           `protobuf:"bytes,1,opt,name=stall_id,json=stallId,proto3" json:"stall_id"`
	Code            string           `protobuf:"bytes,2,opt,name=code,proto3" json:"code"`
	Name            string           `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	Status          StallStatus      `protobuf:"varint,4,opt,name=status,proto3,enum=market.StallStatus" json:"status"` // Default to Inactive
	Type            StallType        `protobuf:"varint,5,opt,name=type,proto3,enum=market.StallType" json:"type"`       // Default to Temporary
	Clazz           StallClass       `protobuf:"varint,6,opt,name=clazz,proto3,enum=market.StallClass" json:"clazz"`    // Default to Regular
	State           StallState       `protobuf:"varint,7,opt,name=state,proto3,enum=market.StallState" json:"state"`
	Area            float64          `protobuf:"fixed64,12,opt,name=area,proto3" json:"area"`
	MonthlyFee      float64          `protobuf:"fixed64,13,opt,name=monthly_fee,json=monthlyFee,proto3" json:"monthly_fee"`
	PreviousVersion string           `protobuf:"bytes,14,opt,name=previous_version,json=previousVersion,proto3" json:"previous_version"`
	FloorCode       string           `protobuf:"bytes,17,opt,name=floor_code,json=floorCode,proto3" json:"floor_code"`
	MarketCode      string           `protobuf:"bytes,18,opt,name=market_code,json=marketCode,proto3" json:"market_code"`
	LeaseStatus     StallLeaseStatus `protobuf:"varint,19,opt,name=lease_status,json=leaseStatus,proto3,enum=market.StallLeaseStatus" json:"lease_status"`
	// Position data
	Shape       string      `protobuf:"bytes,20,opt,name=shape,proto3" json:"shape"`
	XAxis       float64     `protobuf:"fixed64,21,opt,name=x_axis,json=xAxis,proto3" json:"x_axis"`
	YAxis       float64     `protobuf:"fixed64,22,opt,name=y_axis,json=yAxis,proto3" json:"y_axis"`
	WAxis       float64     `protobuf:"fixed64,23,opt,name=w_axis,json=wAxis,proto3" json:"w_axis"`
	HAxis       float64     `protobuf:"fixed64,24,opt,name=h_axis,json=hAxis,proto3" json:"h_axis"`
	Points      []*Point    `protobuf:"bytes,25,rep,name=points,proto3" json:"points"`
	Label       string      `protobuf:"bytes,26,opt,name=label,proto3" json:"label"`
	Rotate      int32       `protobuf:"varint,27,opt,name=rotate,proto3" json:"rotate"`
	FontSize    float64     `protobuf:"fixed64,30,opt,name=font_size,json=fontSize,proto3" json:"font_size"`
	MarketClass MarketClass `protobuf:"varint,28,opt,name=market_class,json=marketClass,proto3,enum=market.MarketClass" json:"market_class"`
	MarketType  MarketType  `protobuf:"varint,29,opt,name=market_type,json=marketType,proto3,enum=market.MarketType" json:"market_type"`
	OccupiedBy  string      `protobuf:"bytes,31,opt,name=occupied_by,json=occupiedBy,proto3" json:"occupied_by"`
	// Fetch from rental service
	StallHolderName string `protobuf:"bytes,32,opt,name=stall_holder_name,json=stallHolderName,proto3" json:"stall_holder_name"`
}

func (x *Stall) Reset() {
	*x = Stall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_stall_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stall) ProtoMessage() {}

func (x *Stall) ProtoReflect() protoreflect.Message {
	mi := &file_market_stall_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stall.ProtoReflect.Descriptor instead.
func (*Stall) Descriptor() ([]byte, []int) {
	return file_market_stall_proto_rawDescGZIP(), []int{2}
}

func (x *Stall) GetStallId() string {
	if x != nil {
		return x.StallId
	}
	return ""
}

func (x *Stall) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Stall) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Stall) GetStatus() StallStatus {
	if x != nil {
		return x.Status
	}
	return StallStatus_STALL_STATUS_UNSPECIFIED
}

func (x *Stall) GetType() StallType {
	if x != nil {
		return x.Type
	}
	return StallType_STALL_TYPE_UNSPECIFIED
}

func (x *Stall) GetClazz() StallClass {
	if x != nil {
		return x.Clazz
	}
	return StallClass_STALL_CLASS_UNSPECIFIED
}

func (x *Stall) GetState() StallState {
	if x != nil {
		return x.State
	}
	return StallState_STALL_STATE_UNSPECIFIED
}

func (x *Stall) GetArea() float64 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *Stall) GetMonthlyFee() float64 {
	if x != nil {
		return x.MonthlyFee
	}
	return 0
}

func (x *Stall) GetPreviousVersion() string {
	if x != nil {
		return x.PreviousVersion
	}
	return ""
}

func (x *Stall) GetFloorCode() string {
	if x != nil {
		return x.FloorCode
	}
	return ""
}

func (x *Stall) GetMarketCode() string {
	if x != nil {
		return x.MarketCode
	}
	return ""
}

func (x *Stall) GetLeaseStatus() StallLeaseStatus {
	if x != nil {
		return x.LeaseStatus
	}
	return StallLeaseStatus_STALL_AVAILABLE
}

func (x *Stall) GetShape() string {
	if x != nil {
		return x.Shape
	}
	return ""
}

func (x *Stall) GetXAxis() float64 {
	if x != nil {
		return x.XAxis
	}
	return 0
}

func (x *Stall) GetYAxis() float64 {
	if x != nil {
		return x.YAxis
	}
	return 0
}

func (x *Stall) GetWAxis() float64 {
	if x != nil {
		return x.WAxis
	}
	return 0
}

func (x *Stall) GetHAxis() float64 {
	if x != nil {
		return x.HAxis
	}
	return 0
}

func (x *Stall) GetPoints() []*Point {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *Stall) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Stall) GetRotate() int32 {
	if x != nil {
		return x.Rotate
	}
	return 0
}

func (x *Stall) GetFontSize() float64 {
	if x != nil {
		return x.FontSize
	}
	return 0
}

func (x *Stall) GetMarketClass() MarketClass {
	if x != nil {
		return x.MarketClass
	}
	return MarketClass_MARKET_CLASS_UNSPECIFIED
}

func (x *Stall) GetMarketType() MarketType {
	if x != nil {
		return x.MarketType
	}
	return MarketType_MARKET_TYPE_UNSPECIFIED
}

func (x *Stall) GetOccupiedBy() string {
	if x != nil {
		return x.OccupiedBy
	}
	return ""
}

func (x *Stall) GetStallHolderName() string {
	if x != nil {
		return x.StallHolderName
	}
	return ""
}

type GetStallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success"`
	// Types that are assignable to Response:
	//	*GetStallResponse_Data_
	//	*GetStallResponse_Error
	Response isGetStallResponse_Response `protobuf_oneof:"response"`
}

func (x *GetStallResponse) Reset() {
	*x = GetStallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_stall_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStallResponse) ProtoMessage() {}

func (x *GetStallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_stall_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStallResponse.ProtoReflect.Descriptor instead.
func (*GetStallResponse) Descriptor() ([]byte, []int) {
	return file_market_stall_proto_rawDescGZIP(), []int{3}
}

func (x *GetStallResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (m *GetStallResponse) GetResponse() isGetStallResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GetStallResponse) GetData() *GetStallResponse_Data {
	if x, ok := x.GetResponse().(*GetStallResponse_Data_); ok {
		return x.Data
	}
	return nil
}

func (x *GetStallResponse) GetError() *common.Error {
	if x, ok := x.GetResponse().(*GetStallResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isGetStallResponse_Response interface {
	isGetStallResponse_Response()
}

type GetStallResponse_Data_ struct {
	Data *GetStallResponse_Data `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

type GetStallResponse_Error struct {
	Error *common.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*GetStallResponse_Data_) isGetStallResponse_Response() {}

func (*GetStallResponse_Error) isGetStallResponse_Response() {}

type ListStallsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success"`
	// Types that are assignable to Response:
	//	*ListStallsResponse_Data_
	//	*ListStallsResponse_Error
	Response isListStallsResponse_Response `protobuf_oneof:"response"`
}

func (x *ListStallsResponse) Reset() {
	*x = ListStallsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_stall_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStallsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStallsResponse) ProtoMessage() {}

func (x *ListStallsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_stall_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStallsResponse.ProtoReflect.Descriptor instead.
func (*ListStallsResponse) Descriptor() ([]byte, []int) {
	return file_market_stall_proto_rawDescGZIP(), []int{4}
}

func (x *ListStallsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (m *ListStallsResponse) GetResponse() isListStallsResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ListStallsResponse) GetData() *ListStallsResponse_Data {
	if x, ok := x.GetResponse().(*ListStallsResponse_Data_); ok {
		return x.Data
	}
	return nil
}

func (x *ListStallsResponse) GetError() *common.Error {
	if x, ok := x.GetResponse().(*ListStallsResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isListStallsResponse_Response interface {
	isListStallsResponse_Response()
}

type ListStallsResponse_Data_ struct {
	Data *ListStallsResponse_Data `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

type ListStallsResponse_Error struct {
	Error *common.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*ListStallsResponse_Data_) isListStallsResponse_Response() {}

func (*ListStallsResponse_Error) isListStallsResponse_Response() {}

type GetStallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StallId string `protobuf:"bytes,1,opt,name=stall_id,json=stallId,proto3" json:"stall_id"`
	Draft   *bool  `protobuf:"varint,2,opt,name=draft,proto3,oneof" json:"draft"`
}

func (x *GetStallRequest) Reset() {
	*x = GetStallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_stall_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStallRequest) ProtoMessage() {}

func (x *GetStallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_stall_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStallRequest.ProtoReflect.Descriptor instead.
func (*GetStallRequest) Descriptor() ([]byte, []int) {
	return file_market_stall_proto_rawDescGZIP(), []int{5}
}

func (x *GetStallRequest) GetStallId() string {
	if x != nil {
		return x.StallId
	}
	return ""
}

func (x *GetStallRequest) GetDraft() bool {
	if x != nil && x.Draft != nil {
		return *x.Draft
	}
	return false
}

type StallInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StallId       string           `protobuf:"bytes,1,opt,name=stall_id,json=stallId,proto3" json:"stall_id"`
	Code          string           `protobuf:"bytes,2,opt,name=code,proto3" json:"code"`
	StallName     string           `protobuf:"bytes,3,opt,name=stall_name,json=stallName,proto3" json:"stall_name"`
	StallType     StallType        `protobuf:"varint,4,opt,name=stall_type,json=stallType,proto3,enum=market.StallType" json:"stall_type"`
	StallClass    StallClass       `protobuf:"varint,5,opt,name=stall_class,json=stallClass,proto3,enum=market.StallClass" json:"stall_class"`
	MarketId      string           `protobuf:"bytes,6,opt,name=market_id,json=marketId,proto3" json:"market_id"`
	MarketName    string           `protobuf:"bytes,7,opt,name=market_name,json=marketName,proto3" json:"market_name"`
	MarketCode    string           `protobuf:"bytes,8,opt,name=market_code,json=marketCode,proto3" json:"market_code"`
	MarketType    MarketType       `protobuf:"varint,9,opt,name=market_type,json=marketType,proto3,enum=market.MarketType" json:"market_type"`
	MarketClass   MarketClass      `protobuf:"varint,10,opt,name=market_class,json=marketClass,proto3,enum=market.MarketClass" json:"market_class"`
	FloorCode     string           `protobuf:"bytes,11,opt,name=floor_code,json=floorCode,proto3" json:"floor_code"`
	FloorName     string           `protobuf:"bytes,12,opt,name=floor_name,json=floorName,proto3" json:"floor_name"`
	Area          float64          `protobuf:"fixed64,13,opt,name=area,proto3" json:"area"`
	LeaseStatus   StallLeaseStatus `protobuf:"varint,15,opt,name=lease_status,json=leaseStatus,proto3,enum=market.StallLeaseStatus" json:"lease_status"`
	MarketAddress string           `protobuf:"bytes,16,opt,name=market_address,json=marketAddress,proto3" json:"market_address"`
}

func (x *StallInfo) Reset() {
	*x = StallInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_stall_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StallInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StallInfo) ProtoMessage() {}

func (x *StallInfo) ProtoReflect() protoreflect.Message {
	mi := &file_market_stall_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StallInfo.ProtoReflect.Descriptor instead.
func (*StallInfo) Descriptor() ([]byte, []int) {
	return file_market_stall_proto_rawDescGZIP(), []int{6}
}

func (x *StallInfo) GetStallId() string {
	if x != nil {
		return x.StallId
	}
	return ""
}

func (x *StallInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *StallInfo) GetStallName() string {
	if x != nil {
		return x.StallName
	}
	return ""
}

func (x *StallInfo) GetStallType() StallType {
	if x != nil {
		return x.StallType
	}
	return StallType_STALL_TYPE_UNSPECIFIED
}

func (x *StallInfo) GetStallClass() StallClass {
	if x != nil {
		return x.StallClass
	}
	return StallClass_STALL_CLASS_UNSPECIFIED
}

func (x *StallInfo) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *StallInfo) GetMarketName() string {
	if x != nil {
		return x.MarketName
	}
	return ""
}

func (x *StallInfo) GetMarketCode() string {
	if x != nil {
		return x.MarketCode
	}
	return ""
}

func (x *StallInfo) GetMarketType() MarketType {
	if x != nil {
		return x.MarketType
	}
	return MarketType_MARKET_TYPE_UNSPECIFIED
}

func (x *StallInfo) GetMarketClass() MarketClass {
	if x != nil {
		return x.MarketClass
	}
	return MarketClass_MARKET_CLASS_UNSPECIFIED
}

func (x *StallInfo) GetFloorCode() string {
	if x != nil {
		return x.FloorCode
	}
	return ""
}

func (x *StallInfo) GetFloorName() string {
	if x != nil {
		return x.FloorName
	}
	return ""
}

func (x *StallInfo) GetArea() float64 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *StallInfo) GetLeaseStatus() StallLeaseStatus {
	if x != nil {
		return x.LeaseStatus
	}
	return StallLeaseStatus_STALL_AVAILABLE
}

func (x *StallInfo) GetMarketAddress() string {
	if x != nil {
		return x.MarketAddress
	}
	return ""
}

type UpdateStallMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StallId string       `protobuf:"bytes,1,opt,name=stall_id,json=stallId,proto3" json:"stall_id"`
	Name    *string      `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name"`
	Status  *StallStatus `protobuf:"varint,3,opt,name=status,proto3,enum=market.StallStatus,oneof" json:"status"`
	Type    *StallType   `protobuf:"varint,4,opt,name=type,proto3,enum=market.StallType,oneof" json:"type"`
	Clazz   *StallClass  `protobuf:"varint,5,opt,name=clazz,proto3,enum=market.StallClass,oneof" json:"clazz"`
	Area    *float64     `protobuf:"fixed64,6,opt,name=area,proto3,oneof" json:"area"`
}

func (x *UpdateStallMetadataRequest) Reset() {
	*x = UpdateStallMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_stall_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStallMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStallMetadataRequest) ProtoMessage() {}

func (x *UpdateStallMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_stall_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStallMetadataRequest.ProtoReflect.Descriptor instead.
func (*UpdateStallMetadataRequest) Descriptor() ([]byte, []int) {
	return file_market_stall_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateStallMetadataRequest) GetStallId() string {
	if x != nil {
		return x.StallId
	}
	return ""
}

func (x *UpdateStallMetadataRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateStallMetadataRequest) GetStatus() StallStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return StallStatus_STALL_STATUS_UNSPECIFIED
}

func (x *UpdateStallMetadataRequest) GetType() StallType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return StallType_STALL_TYPE_UNSPECIFIED
}

func (x *UpdateStallMetadataRequest) GetClazz() StallClass {
	if x != nil && x.Clazz != nil {
		return *x.Clazz
	}
	return StallClass_STALL_CLASS_UNSPECIFIED
}

func (x *UpdateStallMetadataRequest) GetArea() float64 {
	if x != nil && x.Area != nil {
		return *x.Area
	}
	return 0
}

type UpdateStallPositionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StallId  string   `protobuf:"bytes,1,opt,name=stall_id,json=stallId,proto3" json:"stall_id"`
	Shape    string   `protobuf:"bytes,9,opt,name=shape,proto3" json:"shape"`
	XAxis    *float64 `protobuf:"fixed64,10,opt,name=x_axis,json=xAxis,proto3,oneof" json:"x_axis"`
	YAxis    *float64 `protobuf:"fixed64,11,opt,name=y_axis,json=yAxis,proto3,oneof" json:"y_axis"`
	WAxis    *float64 `protobuf:"fixed64,12,opt,name=w_axis,json=wAxis,proto3,oneof" json:"w_axis"`
	HAxis    *float64 `protobuf:"fixed64,13,opt,name=h_axis,json=hAxis,proto3,oneof" json:"h_axis"`
	Points   []*Point `protobuf:"bytes,14,rep,name=points,proto3" json:"points"`
	Label    *string  `protobuf:"bytes,15,opt,name=label,proto3,oneof" json:"label"`
	Rotate   *int32   `protobuf:"varint,16,opt,name=rotate,proto3,oneof" json:"rotate"`
	FontSize *float64 `protobuf:"fixed64,17,opt,name=font_size,json=fontSize,proto3,oneof" json:"font_size"`
}

func (x *UpdateStallPositionRequest) Reset() {
	*x = UpdateStallPositionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_stall_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStallPositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStallPositionRequest) ProtoMessage() {}

func (x *UpdateStallPositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_stall_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStallPositionRequest.ProtoReflect.Descriptor instead.
func (*UpdateStallPositionRequest) Descriptor() ([]byte, []int) {
	return file_market_stall_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateStallPositionRequest) GetStallId() string {
	if x != nil {
		return x.StallId
	}
	return ""
}

func (x *UpdateStallPositionRequest) GetShape() string {
	if x != nil {
		return x.Shape
	}
	return ""
}

func (x *UpdateStallPositionRequest) GetXAxis() float64 {
	if x != nil && x.XAxis != nil {
		return *x.XAxis
	}
	return 0
}

func (x *UpdateStallPositionRequest) GetYAxis() float64 {
	if x != nil && x.YAxis != nil {
		return *x.YAxis
	}
	return 0
}

func (x *UpdateStallPositionRequest) GetWAxis() float64 {
	if x != nil && x.WAxis != nil {
		return *x.WAxis
	}
	return 0
}

func (x *UpdateStallPositionRequest) GetHAxis() float64 {
	if x != nil && x.HAxis != nil {
		return *x.HAxis
	}
	return 0
}

func (x *UpdateStallPositionRequest) GetPoints() []*Point {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *UpdateStallPositionRequest) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *UpdateStallPositionRequest) GetRotate() int32 {
	if x != nil && x.Rotate != nil {
		return *x.Rotate
	}
	return 0
}

func (x *UpdateStallPositionRequest) GetFontSize() float64 {
	if x != nil && x.FontSize != nil {
		return *x.FontSize
	}
	return 0
}

type GetStallInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Searcher *StallSearcher `protobuf:"bytes,1,opt,name=searcher,proto3" json:"searcher"`
}

func (x *GetStallInfoRequest) Reset() {
	*x = GetStallInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_stall_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStallInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStallInfoRequest) ProtoMessage() {}

func (x *GetStallInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_stall_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStallInfoRequest.ProtoReflect.Descriptor instead.
func (*GetStallInfoRequest) Descriptor() ([]byte, []int) {
	return file_market_stall_proto_rawDescGZIP(), []int{9}
}

func (x *GetStallInfoRequest) GetSearcher() *StallSearcher {
	if x != nil {
		return x.Searcher
	}
	return nil
}

type StallSearcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketCode string `protobuf:"bytes,1,opt,name=market_code,json=marketCode,proto3" json:"market_code"`
	FloorCode  string `protobuf:"bytes,2,opt,name=floor_code,json=floorCode,proto3" json:"floor_code"`
	StallCode  string `protobuf:"bytes,3,opt,name=stall_code,json=stallCode,proto3" json:"stall_code"`
}

func (x *StallSearcher) Reset() {
	*x = StallSearcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_stall_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StallSearcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StallSearcher) ProtoMessage() {}

func (x *StallSearcher) ProtoReflect() protoreflect.Message {
	mi := &file_market_stall_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StallSearcher.ProtoReflect.Descriptor instead.
func (*StallSearcher) Descriptor() ([]byte, []int) {
	return file_market_stall_proto_rawDescGZIP(), []int{10}
}

func (x *StallSearcher) GetMarketCode() string {
	if x != nil {
		return x.MarketCode
	}
	return ""
}

func (x *StallSearcher) GetFloorCode() string {
	if x != nil {
		return x.FloorCode
	}
	return ""
}

func (x *StallSearcher) GetStallCode() string {
	if x != nil {
		return x.StallCode
	}
	return ""
}

type GetStallInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success"`
	// Types that are assignable to Response:
	//	*GetStallInfoResponse_Data_
	//	*GetStallInfoResponse_Error
	Response isGetStallInfoResponse_Response `protobuf_oneof:"response"`
}

func (x *GetStallInfoResponse) Reset() {
	*x = GetStallInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_stall_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStallInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStallInfoResponse) ProtoMessage() {}

func (x *GetStallInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_stall_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStallInfoResponse.ProtoReflect.Descriptor instead.
func (*GetStallInfoResponse) Descriptor() ([]byte, []int) {
	return file_market_stall_proto_rawDescGZIP(), []int{11}
}

func (x *GetStallInfoResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (m *GetStallInfoResponse) GetResponse() isGetStallInfoResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GetStallInfoResponse) GetData() *GetStallInfoResponse_Data {
	if x, ok := x.GetResponse().(*GetStallInfoResponse_Data_); ok {
		return x.Data
	}
	return nil
}

func (x *GetStallInfoResponse) GetError() *common.Error {
	if x, ok := x.GetResponse().(*GetStallInfoResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isGetStallInfoResponse_Response interface {
	isGetStallInfoResponse_Response()
}

type GetStallInfoResponse_Data_ struct {
	Data *GetStallInfoResponse_Data `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

type GetStallInfoResponse_Error struct {
	Error *common.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*GetStallInfoResponse_Data_) isGetStallInfoResponse_Response() {}

func (*GetStallInfoResponse_Error) isGetStallInfoResponse_Response() {}

type ListStallsInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Searchers []*StallSearcher `protobuf:"bytes,1,rep,name=searchers,proto3" json:"searchers"`
}

func (x *ListStallsInfoRequest) Reset() {
	*x = ListStallsInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_stall_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStallsInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStallsInfoRequest) ProtoMessage() {}

func (x *ListStallsInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_stall_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStallsInfoRequest.ProtoReflect.Descriptor instead.
func (*ListStallsInfoRequest) Descriptor() ([]byte, []int) {
	return file_market_stall_proto_rawDescGZIP(), []int{12}
}

func (x *ListStallsInfoRequest) GetSearchers() []*StallSearcher {
	if x != nil {
		return x.Searchers
	}
	return nil
}

type ListStallsInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success"`
	// Types that are assignable to Response:
	//	*ListStallsInfoResponse_Data_
	//	*ListStallsInfoResponse_Error
	Response isListStallsInfoResponse_Response `protobuf_oneof:"response"`
}

func (x *ListStallsInfoResponse) Reset() {
	*x = ListStallsInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_stall_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStallsInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStallsInfoResponse) ProtoMessage() {}

func (x *ListStallsInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_stall_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStallsInfoResponse.ProtoReflect.Descriptor instead.
func (*ListStallsInfoResponse) Descriptor() ([]byte, []int) {
	return file_market_stall_proto_rawDescGZIP(), []int{13}
}

func (x *ListStallsInfoResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (m *ListStallsInfoResponse) GetResponse() isListStallsInfoResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ListStallsInfoResponse) GetData() *ListStallsInfoResponse_Data {
	if x, ok := x.GetResponse().(*ListStallsInfoResponse_Data_); ok {
		return x.Data
	}
	return nil
}

func (x *ListStallsInfoResponse) GetError() *common.Error {
	if x, ok := x.GetResponse().(*ListStallsInfoResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isListStallsInfoResponse_Response interface {
	isListStallsInfoResponse_Response()
}

type ListStallsInfoResponse_Data_ struct {
	Data *ListStallsInfoResponse_Data `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

type ListStallsInfoResponse_Error struct {
	Error *common.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*ListStallsInfoResponse_Data_) isListStallsInfoResponse_Response() {}

func (*ListStallsInfoResponse_Error) isListStallsInfoResponse_Response() {}

type GetStallResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stall *Stall `protobuf:"bytes,1,opt,name=stall,proto3" json:"stall"`
}

func (x *GetStallResponse_Data) Reset() {
	*x = GetStallResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_stall_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStallResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStallResponse_Data) ProtoMessage() {}

func (x *GetStallResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_market_stall_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStallResponse_Data.ProtoReflect.Descriptor instead.
func (*GetStallResponse_Data) Descriptor() ([]byte, []int) {
	return file_market_stall_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GetStallResponse_Data) GetStall() *Stall {
	if x != nil {
		return x.Stall
	}
	return nil
}

type ListStallsResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stalls []*Stall `protobuf:"bytes,1,rep,name=stalls,proto3" json:"stalls"`
}

func (x *ListStallsResponse_Data) Reset() {
	*x = ListStallsResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_stall_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStallsResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStallsResponse_Data) ProtoMessage() {}

func (x *ListStallsResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_market_stall_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStallsResponse_Data.ProtoReflect.Descriptor instead.
func (*ListStallsResponse_Data) Descriptor() ([]byte, []int) {
	return file_market_stall_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ListStallsResponse_Data) GetStalls() []*Stall {
	if x != nil {
		return x.Stalls
	}
	return nil
}

type GetStallInfoResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stall *StallInfo `protobuf:"bytes,1,opt,name=stall,proto3" json:"stall"`
}

func (x *GetStallInfoResponse_Data) Reset() {
	*x = GetStallInfoResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_stall_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStallInfoResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStallInfoResponse_Data) ProtoMessage() {}

func (x *GetStallInfoResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_market_stall_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStallInfoResponse_Data.ProtoReflect.Descriptor instead.
func (*GetStallInfoResponse_Data) Descriptor() ([]byte, []int) {
	return file_market_stall_proto_rawDescGZIP(), []int{11, 0}
}

func (x *GetStallInfoResponse_Data) GetStall() *StallInfo {
	if x != nil {
		return x.Stall
	}
	return nil
}

type ListStallsInfoResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stalls []*StallInfo `protobuf:"bytes,1,rep,name=stalls,proto3" json:"stalls"`
}

func (x *ListStallsInfoResponse_Data) Reset() {
	*x = ListStallsInfoResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_stall_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStallsInfoResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStallsInfoResponse_Data) ProtoMessage() {}

func (x *ListStallsInfoResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_market_stall_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStallsInfoResponse_Data.ProtoReflect.Descriptor instead.
func (*ListStallsInfoResponse_Data) Descriptor() ([]byte, []int) {
	return file_market_stall_proto_rawDescGZIP(), []int{13, 0}
}

func (x *ListStallsInfoResponse_Data) GetStalls() []*StallInfo {
	if x != nil {
		return x.Stalls
	}
	return nil
}

var File_market_stall_proto protoreflect.FileDescriptor

var file_market_stall_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x1a, 0x13, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x15, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfd, 0x04, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x70, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x7a, 0x7a, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x6c, 0x6c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x7a, 0x7a,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x03, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x73,
	0x68, 0x61, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x78, 0x5f, 0x61, 0x78, 0x69,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x05, 0x78, 0x41, 0x78, 0x69, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x79, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x05, 0x79, 0x41, 0x78, 0x69, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x06, 0x77, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x07, 0x52, 0x05, 0x77, 0x41, 0x78, 0x69, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x68,
	0x5f, 0x61, 0x78, 0x69, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x08, 0x52, 0x05, 0x68,
	0x41, 0x78, 0x69, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x19,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x6f, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x06, 0x72, 0x6f, 0x74,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52, 0x08, 0x66, 0x6f, 0x6e,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x63, 0x6c, 0x61, 0x7a, 0x7a, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x78, 0x5f,
	0x61, 0x78, 0x69, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x79, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x77, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68,
	0x5f, 0x61, 0x78, 0x69, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66,
	0x6f, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x35, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x78, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x78, 0x41, 0x78, 0x69, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x79, 0x5f, 0x61, 0x78,
	0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x79, 0x41, 0x78, 0x69, 0x73, 0x22,
	0xed, 0x06, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x7a, 0x7a, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x7a, 0x7a, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x6c, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x46, 0x65, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x78, 0x5f, 0x61, 0x78, 0x69,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x78, 0x41, 0x78, 0x69, 0x73, 0x12, 0x15,
	0x0a, 0x06, 0x79, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x79, 0x41, 0x78, 0x69, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x77, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x77, 0x41, 0x78, 0x69, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x68, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x68, 0x41,
	0x78, 0x69, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x19, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6e, 0x74,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x66, 0x6f, 0x6e,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x33, 0x0a,
	0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xc1, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x33,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x2b, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6c, 0x6c,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6c,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x1a, 0x2d, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x06, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x73, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x64,
	0x72, 0x61, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x64, 0x72,
	0x61, 0x66, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74,
	0x22, 0xc2, 0x04, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x6c, 0x6c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x61, 0x72, 0x65,
	0x61, 0x12, 0x3b, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa6, 0x02, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x01, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x7a, 0x7a, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x03, 0x52, 0x05, 0x63, 0x6c, 0x61,
	0x7a, 0x7a, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x63, 0x6c, 0x61, 0x7a, 0x7a, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x22, 0x8d,
	0x03, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x06, 0x78, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00,
	0x52, 0x05, 0x78, 0x41, 0x78, 0x69, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x79, 0x5f,
	0x61, 0x78, 0x69, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x05, 0x79, 0x41,
	0x78, 0x69, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x77, 0x5f, 0x61, 0x78, 0x69, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x05, 0x77, 0x41, 0x78, 0x69, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x68, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x03, 0x52, 0x05, 0x68, 0x41, 0x78, 0x69, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x06, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x78, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x79,
	0x5f, 0x61, 0x78, 0x69, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x5f, 0x61, 0x78, 0x69, 0x73,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x48,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x52, 0x08,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x22, 0x6e, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x6c,
	0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6c,
	0x6f, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x2f, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6c,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x42, 0x0a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x6c, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x52, 0x09, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x72, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x31, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73,
	0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xf3, 0x04, 0x0a,
	0x0c, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a,
	0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x1a, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6c, 0x6c,
	0x12, 0x17, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x55, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a,
	0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e,
	0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6c,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x51, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1d, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x31, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x72, 0x73, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x50, 0x01, 0x5a, 0x1d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_market_stall_proto_rawDescOnce sync.Once
	file_market_stall_proto_rawDescData = file_market_stall_proto_rawDesc
)

func file_market_stall_proto_rawDescGZIP() []byte {
	file_market_stall_proto_rawDescOnce.Do(func() {
		file_market_stall_proto_rawDescData = protoimpl.X.CompressGZIP(file_market_stall_proto_rawDescData)
	})
	return file_market_stall_proto_rawDescData
}

var file_market_stall_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_market_stall_proto_goTypes = []interface{}{
	(*CreateStallRequest)(nil),          // 0: market.CreateStallRequest
	(*Point)(nil),                       // 1: market.Point
	(*Stall)(nil),                       // 2: market.Stall
	(*GetStallResponse)(nil),            // 3: market.GetStallResponse
	(*ListStallsResponse)(nil),          // 4: market.ListStallsResponse
	(*GetStallRequest)(nil),             // 5: market.GetStallRequest
	(*StallInfo)(nil),                   // 6: market.StallInfo
	(*UpdateStallMetadataRequest)(nil),  // 7: market.UpdateStallMetadataRequest
	(*UpdateStallPositionRequest)(nil),  // 8: market.UpdateStallPositionRequest
	(*GetStallInfoRequest)(nil),         // 9: market.GetStallInfoRequest
	(*StallSearcher)(nil),               // 10: market.StallSearcher
	(*GetStallInfoResponse)(nil),        // 11: market.GetStallInfoResponse
	(*ListStallsInfoRequest)(nil),       // 12: market.ListStallsInfoRequest
	(*ListStallsInfoResponse)(nil),      // 13: market.ListStallsInfoResponse
	(*GetStallResponse_Data)(nil),       // 14: market.GetStallResponse.Data
	(*ListStallsResponse_Data)(nil),     // 15: market.ListStallsResponse.Data
	(*GetStallInfoResponse_Data)(nil),   // 16: market.GetStallInfoResponse.Data
	(*ListStallsInfoResponse_Data)(nil), // 17: market.ListStallsInfoResponse.Data
	(StallStatus)(0),                    // 18: market.StallStatus
	(StallType)(0),                      // 19: market.StallType
	(StallClass)(0),                     // 20: market.StallClass
	(StallState)(0),                     // 21: market.StallState
	(StallLeaseStatus)(0),               // 22: market.StallLeaseStatus
	(MarketClass)(0),                    // 23: market.MarketClass
	(MarketType)(0),                     // 24: market.MarketType
	(*common.Error)(nil),                // 25: common.Error
	(*common.FindByIdRequest)(nil),      // 26: common.FindByIdRequest
	(*common.NoContentResponse)(nil),    // 27: common.NoContentResponse
}
var file_market_stall_proto_depIdxs = []int32{
	18, // 0: market.CreateStallRequest.status:type_name -> market.StallStatus
	19, // 1: market.CreateStallRequest.type:type_name -> market.StallType
	20, // 2: market.CreateStallRequest.clazz:type_name -> market.StallClass
	1,  // 3: market.CreateStallRequest.points:type_name -> market.Point
	18, // 4: market.Stall.status:type_name -> market.StallStatus
	19, // 5: market.Stall.type:type_name -> market.StallType
	20, // 6: market.Stall.clazz:type_name -> market.StallClass
	21, // 7: market.Stall.state:type_name -> market.StallState
	22, // 8: market.Stall.lease_status:type_name -> market.StallLeaseStatus
	1,  // 9: market.Stall.points:type_name -> market.Point
	23, // 10: market.Stall.market_class:type_name -> market.MarketClass
	24, // 11: market.Stall.market_type:type_name -> market.MarketType
	14, // 12: market.GetStallResponse.data:type_name -> market.GetStallResponse.Data
	25, // 13: market.GetStallResponse.error:type_name -> common.Error
	15, // 14: market.ListStallsResponse.data:type_name -> market.ListStallsResponse.Data
	25, // 15: market.ListStallsResponse.error:type_name -> common.Error
	19, // 16: market.StallInfo.stall_type:type_name -> market.StallType
	20, // 17: market.StallInfo.stall_class:type_name -> market.StallClass
	24, // 18: market.StallInfo.market_type:type_name -> market.MarketType
	23, // 19: market.StallInfo.market_class:type_name -> market.MarketClass
	22, // 20: market.StallInfo.lease_status:type_name -> market.StallLeaseStatus
	18, // 21: market.UpdateStallMetadataRequest.status:type_name -> market.StallStatus
	19, // 22: market.UpdateStallMetadataRequest.type:type_name -> market.StallType
	20, // 23: market.UpdateStallMetadataRequest.clazz:type_name -> market.StallClass
	1,  // 24: market.UpdateStallPositionRequest.points:type_name -> market.Point
	10, // 25: market.GetStallInfoRequest.searcher:type_name -> market.StallSearcher
	16, // 26: market.GetStallInfoResponse.data:type_name -> market.GetStallInfoResponse.Data
	25, // 27: market.GetStallInfoResponse.error:type_name -> common.Error
	10, // 28: market.ListStallsInfoRequest.searchers:type_name -> market.StallSearcher
	17, // 29: market.ListStallsInfoResponse.data:type_name -> market.ListStallsInfoResponse.Data
	25, // 30: market.ListStallsInfoResponse.error:type_name -> common.Error
	2,  // 31: market.GetStallResponse.Data.stall:type_name -> market.Stall
	2,  // 32: market.ListStallsResponse.Data.stalls:type_name -> market.Stall
	6,  // 33: market.GetStallInfoResponse.Data.stall:type_name -> market.StallInfo
	6,  // 34: market.ListStallsInfoResponse.Data.stalls:type_name -> market.StallInfo
	0,  // 35: market.StallService.CreateStall:input_type -> market.CreateStallRequest
	5,  // 36: market.StallService.GetStall:input_type -> market.GetStallRequest
	26, // 37: market.StallService.GetPublishedStall:input_type -> common.FindByIdRequest
	7,  // 38: market.StallService.UpdateStallMetadata:input_type -> market.UpdateStallMetadataRequest
	8,  // 39: market.StallService.UpdateStallPosition:input_type -> market.UpdateStallPositionRequest
	26, // 40: market.StallService.DeleteStall:input_type -> common.FindByIdRequest
	9,  // 41: market.StallService.GetStallInfo:input_type -> market.GetStallInfoRequest
	12, // 42: market.StallService.ListStallsInfo:input_type -> market.ListStallsInfoRequest
	3,  // 43: market.StallService.CreateStall:output_type -> market.GetStallResponse
	3,  // 44: market.StallService.GetStall:output_type -> market.GetStallResponse
	3,  // 45: market.StallService.GetPublishedStall:output_type -> market.GetStallResponse
	3,  // 46: market.StallService.UpdateStallMetadata:output_type -> market.GetStallResponse
	3,  // 47: market.StallService.UpdateStallPosition:output_type -> market.GetStallResponse
	27, // 48: market.StallService.DeleteStall:output_type -> common.NoContentResponse
	11, // 49: market.StallService.GetStallInfo:output_type -> market.GetStallInfoResponse
	13, // 50: market.StallService.ListStallsInfo:output_type -> market.ListStallsInfoResponse
	43, // [43:51] is the sub-list for method output_type
	35, // [35:43] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_market_stall_proto_init() }
func file_market_stall_proto_init() {
	if File_market_stall_proto != nil {
		return
	}
	file_market_constant_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_market_stall_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_stall_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_stall_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_stall_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_stall_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStallsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_stall_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_stall_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StallInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_stall_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStallMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_stall_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStallPositionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_stall_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStallInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_stall_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StallSearcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_stall_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStallInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_stall_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStallsInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_stall_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStallsInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_stall_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStallResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_stall_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStallsResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_stall_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStallInfoResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_stall_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStallsInfoResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_market_stall_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_market_stall_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*GetStallResponse_Data_)(nil),
		(*GetStallResponse_Error)(nil),
	}
	file_market_stall_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ListStallsResponse_Data_)(nil),
		(*ListStallsResponse_Error)(nil),
	}
	file_market_stall_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_market_stall_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_market_stall_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_market_stall_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*GetStallInfoResponse_Data_)(nil),
		(*GetStallInfoResponse_Error)(nil),
	}
	file_market_stall_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*ListStallsInfoResponse_Data_)(nil),
		(*ListStallsInfoResponse_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_market_stall_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_market_stall_proto_goTypes,
		DependencyIndexes: file_market_stall_proto_depIdxs,
		MessageInfos:      file_market_stall_proto_msgTypes,
	}.Build()
	File_market_stall_proto = out.File
	file_market_stall_proto_rawDesc = nil
	file_market_stall_proto_goTypes = nil
	file_market_stall_proto_depIdxs = nil
}
