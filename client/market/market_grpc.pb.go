// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: market/market.proto

package market

import (
	context "context"
	common "gateway-service/client/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarketServiceClient is the client API for MarketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketServiceClient interface {
	ListMarkets(ctx context.Context, in *ListMarketsRequest, opts ...grpc.CallOption) (*common.PageResponse, error)
	CreateMarket(ctx context.Context, in *UpsertMarketRequest, opts ...grpc.CallOption) (*common.OnlyIdResponse, error)
	GetMarket(ctx context.Context, in *GetMarketRequest, opts ...grpc.CallOption) (*GetMarketResponse, error)
	UpdateMarket(ctx context.Context, in *UpsertMarketRequest, opts ...grpc.CallOption) (*UpdateMarketResponse, error)
	DeleteMarket(ctx context.Context, in *common.FindByIdRequest, opts ...grpc.CallOption) (*common.NoContentResponse, error)
}

type marketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketServiceClient(cc grpc.ClientConnInterface) MarketServiceClient {
	return &marketServiceClient{cc}
}

func (c *marketServiceClient) ListMarkets(ctx context.Context, in *ListMarketsRequest, opts ...grpc.CallOption) (*common.PageResponse, error) {
	out := new(common.PageResponse)
	err := c.cc.Invoke(ctx, "/market.MarketService/ListMarkets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketServiceClient) CreateMarket(ctx context.Context, in *UpsertMarketRequest, opts ...grpc.CallOption) (*common.OnlyIdResponse, error) {
	out := new(common.OnlyIdResponse)
	err := c.cc.Invoke(ctx, "/market.MarketService/CreateMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketServiceClient) GetMarket(ctx context.Context, in *GetMarketRequest, opts ...grpc.CallOption) (*GetMarketResponse, error) {
	out := new(GetMarketResponse)
	err := c.cc.Invoke(ctx, "/market.MarketService/GetMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketServiceClient) UpdateMarket(ctx context.Context, in *UpsertMarketRequest, opts ...grpc.CallOption) (*UpdateMarketResponse, error) {
	out := new(UpdateMarketResponse)
	err := c.cc.Invoke(ctx, "/market.MarketService/UpdateMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketServiceClient) DeleteMarket(ctx context.Context, in *common.FindByIdRequest, opts ...grpc.CallOption) (*common.NoContentResponse, error) {
	out := new(common.NoContentResponse)
	err := c.cc.Invoke(ctx, "/market.MarketService/DeleteMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketServiceServer is the server API for MarketService service.
// All implementations must embed UnimplementedMarketServiceServer
// for forward compatibility
type MarketServiceServer interface {
	ListMarkets(context.Context, *ListMarketsRequest) (*common.PageResponse, error)
	CreateMarket(context.Context, *UpsertMarketRequest) (*common.OnlyIdResponse, error)
	GetMarket(context.Context, *GetMarketRequest) (*GetMarketResponse, error)
	UpdateMarket(context.Context, *UpsertMarketRequest) (*UpdateMarketResponse, error)
	DeleteMarket(context.Context, *common.FindByIdRequest) (*common.NoContentResponse, error)
	mustEmbedUnimplementedMarketServiceServer()
}

// UnimplementedMarketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMarketServiceServer struct {
}

func (UnimplementedMarketServiceServer) ListMarkets(context.Context, *ListMarketsRequest) (*common.PageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMarkets not implemented")
}
func (UnimplementedMarketServiceServer) CreateMarket(context.Context, *UpsertMarketRequest) (*common.OnlyIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMarket not implemented")
}
func (UnimplementedMarketServiceServer) GetMarket(context.Context, *GetMarketRequest) (*GetMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarket not implemented")
}
func (UnimplementedMarketServiceServer) UpdateMarket(context.Context, *UpsertMarketRequest) (*UpdateMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMarket not implemented")
}
func (UnimplementedMarketServiceServer) DeleteMarket(context.Context, *common.FindByIdRequest) (*common.NoContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMarket not implemented")
}
func (UnimplementedMarketServiceServer) mustEmbedUnimplementedMarketServiceServer() {}

// UnsafeMarketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketServiceServer will
// result in compilation errors.
type UnsafeMarketServiceServer interface {
	mustEmbedUnimplementedMarketServiceServer()
}

func RegisterMarketServiceServer(s grpc.ServiceRegistrar, srv MarketServiceServer) {
	s.RegisterService(&MarketService_ServiceDesc, srv)
}

func _MarketService_ListMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).ListMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.MarketService/ListMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).ListMarkets(ctx, req.(*ListMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketService_CreateMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).CreateMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.MarketService/CreateMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).CreateMarket(ctx, req.(*UpsertMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketService_GetMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).GetMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.MarketService/GetMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).GetMarket(ctx, req.(*GetMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketService_UpdateMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).UpdateMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.MarketService/UpdateMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).UpdateMarket(ctx, req.(*UpsertMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketService_DeleteMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.FindByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).DeleteMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.MarketService/DeleteMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).DeleteMarket(ctx, req.(*common.FindByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MarketService_ServiceDesc is the grpc.ServiceDesc for MarketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "market.MarketService",
	HandlerType: (*MarketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMarkets",
			Handler:    _MarketService_ListMarkets_Handler,
		},
		{
			MethodName: "CreateMarket",
			Handler:    _MarketService_CreateMarket_Handler,
		},
		{
			MethodName: "GetMarket",
			Handler:    _MarketService_GetMarket_Handler,
		},
		{
			MethodName: "UpdateMarket",
			Handler:    _MarketService_UpdateMarket_Handler,
		},
		{
			MethodName: "DeleteMarket",
			Handler:    _MarketService_DeleteMarket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "market/market.proto",
}
